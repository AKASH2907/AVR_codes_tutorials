
28.PASSWORD_INCORRECT_RESET_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000065c  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800110  00800110  000007a0  2**0
                  ALLOC
  3 .stab         0000081c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000f0  00000000  00000000  00001108  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b16  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022b  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a77  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a6  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000595  00000000  00000000  00002ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000100c0  00000000  00000000  0000323b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  000132fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e1       	ldi	r26, 0x10	; 16
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 31       	cpi	r26, 0x1A	; 26
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	78 d2       	rcall	.+1264   	; 0x578 <main>
  88:	e7 c2       	rjmp	.+1486   	; 0x658 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcdcmd>:
		_delay_ms(100);
	}
}
void lcdcmd(char x)
{
	PORTC=x;
  8c:	85 bb       	out	0x15, r24	; 21
	PORTC&=~(1<<rs);  //rs=0 ==>Select Command Register
  8e:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To Write
  90:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  92:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcdcmd+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcdcmd+0x12>
  9e:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  a0:	aa 98       	cbi	0x15, 2	; 21
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x1a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x20>
  ac:	00 00       	nop
	_delay_ms(2);
}
  ae:	08 95       	ret

000000b0 <lcddata>:
void lcddata(char x)
{
	PORTC=x;
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<rs);   //rs=1 ==>Select Data register
  b2:	a8 9a       	sbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To write
  b4:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  b6:	aa 9a       	sbi	0x15, 2	; 21
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcddata+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcddata+0x12>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  c4:	aa 98       	cbi	0x15, 2	; 21
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcddata+0x1a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcddata+0x20>
  d0:	00 00       	nop
	_delay_ms(2);
	
}
  d2:	08 95       	ret

000000d4 <cmdbreak>:
void cmdbreak(char x)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	lcdcmd(x&(0xf0));
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	d8 df       	rcall	.-80     	; 0x8c <lcdcmd>
  dc:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	d4 df       	rcall	.-88     	; 0x8c <lcdcmd>
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <init_lcd>:
}
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	
	return 0;
}
void init_lcd()
{
	DDRC=0xff; DDRD=7<<0;
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	81 bb       	out	0x11, r24	; 17
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	f0 df       	rcall	.-32     	; 0xd4 <cmdbreak>
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	ee df       	rcall	.-36     	; 0xd4 <cmdbreak>
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	ec df       	rcall	.-40     	; 0xd4 <cmdbreak>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	ea df       	rcall	.-44     	; 0xd4 <cmdbreak>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	e8 cf       	rjmp	.-48     	; 0xd4 <cmdbreak>

00000104 <databreak>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	d2 df       	rcall	.-92     	; 0xb0 <lcddata>
 10c:	8c 2f       	mov	r24, r28
}
 10e:	82 95       	swap	r24
	lcdcmd((x<<4)&(0xf0));
}
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	ce df       	rcall	.-100    	; 0xb0 <lcddata>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcdstring>:
}
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	}
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
 11c:	ec 01       	movw	r28, r24
	while(*p!=0)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	71 f0       	breq	.+28     	; 0x140 <lcdstring+0x28>
	{	}
	}
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
 124:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!=0)
	{
		databreak(*p);
 126:	ee df       	rcall	.-36     	; 0x104 <databreak>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	90 e7       	ldi	r25, 0x70	; 112
 12c:	a2 e0       	ldi	r26, 0x02	; 2
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	a0 40       	sbci	r26, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcdstring+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcdstring+0x20>
 138:	00 00       	nop
 13a:	89 91       	ld	r24, Y+
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
	while(*p!=0)
 13c:	88 23       	and	r24, r24
 13e:	99 f7       	brne	.-26     	; 0x126 <lcdstring+0xe>
 140:	df 91       	pop	r29
	{
		databreak(*p);
		p++;
		_delay_ms(100);
	}
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <keyscan>:
 146:	5f 92       	push	r5
{
	DDRC=0xff; DDRD=7<<0;
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
 148:	6f 92       	push	r6
 14a:	7f 92       	push	r7
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	i=0;
 164:	10 92 13 01 	sts	0x0113, r1
 168:	10 92 12 01 	sts	0x0112, r1
	while(i<5)
	{PORTD=0x0f;
 16c:	cf e0       	ldi	r28, 0x0F	; 15
		DDRD=0xf0;
 16e:	d0 ef       	ldi	r29, 0xF0	; 240
			i++;
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
		{
			lcdstring("*");
 170:	0f 2e       	mov	r0, r31
 172:	f0 e6       	ldi	r31, 0x60	; 96
 174:	ef 2e       	mov	r14, r31
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
			e_pass[i]='1';
 17c:	04 e1       	ldi	r16, 0x14	; 20
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	0f 2e       	mov	r0, r31
 182:	f1 e3       	ldi	r31, 0x31	; 49
 184:	8f 2e       	mov	r8, r31
 186:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
		{
			lcdstring("*");
			e_pass[i]='4';
 188:	0f 2e       	mov	r0, r31
 18a:	f4 e3       	ldi	r31, 0x34	; 52
 18c:	bf 2e       	mov	r11, r31
 18e:	f0 2d       	mov	r31, r0
		DDRD=0xf0;
		PORTD=PORTD|(1<<5)|(1<<6)|(1<<7);
		if(!(PIND&1<<0))
		{
			lcdstring("*");
			e_pass[i]='7';
 190:	0f 2e       	mov	r0, r31
 192:	f7 e3       	ldi	r31, 0x37	; 55
 194:	df 2e       	mov	r13, r31
 196:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&8<<0))
		{
			lcdstring("*");
			e_pass[i]='0';
 198:	0f 2e       	mov	r0, r31
 19a:	f0 e3       	ldi	r31, 0x30	; 48
 19c:	5f 2e       	mov	r5, r31
 19e:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
		{
			lcdstring("*");
			e_pass[i]='2';
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f2 e3       	ldi	r31, 0x32	; 50
 1a4:	7f 2e       	mov	r7, r31
 1a6:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
		{
			lcdstring("*");
			e_pass[i]='5';
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f5 e3       	ldi	r31, 0x35	; 53
 1ac:	af 2e       	mov	r10, r31
 1ae:	f0 2d       	mov	r31, r0
		DDRD=0xf0;
		PORTD=PORTD|(1<<4)|(1<<6)|(1<<7);
		if(!(PIND&1<<0))
		{
			lcdstring("*");
			e_pass[i]='8';
 1b0:	0f 2e       	mov	r0, r31
 1b2:	f8 e3       	ldi	r31, 0x38	; 56
 1b4:	cf 2e       	mov	r12, r31
 1b6:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
		{
			lcdstring("*");
			e_pass[i]='3';
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f3 e3       	ldi	r31, 0x33	; 51
 1bc:	6f 2e       	mov	r6, r31
 1be:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
		{
			lcdstring("*");
			e_pass[i]='6';
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f6 e3       	ldi	r31, 0x36	; 54
 1c4:	9f 2e       	mov	r9, r31
 1c6:	f0 2d       	mov	r31, r0
}
void keyscan()
{
	i=0;
	while(i<5)
	{PORTD=0x0f;
 1c8:	c2 bb       	out	0x12, r28	; 18
		DDRD=0xf0;
 1ca:	d1 bb       	out	0x11, r29	; 17
		PORTD=PORTD|(1<<5)|(1<<6)|(1<<7);
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	80 6e       	ori	r24, 0xE0	; 224
 1d0:	82 bb       	out	0x12, r24	; 18
		if(!(PIND&1<<0))
 1d2:	80 99       	sbic	0x10, 0	; 16
 1d4:	19 c0       	rjmp	.+50     	; 0x208 <keyscan+0xc2>
		{
			lcdstring("*");
 1d6:	c7 01       	movw	r24, r14
 1d8:	9f df       	rcall	.-194    	; 0x118 <lcdstring>
 1da:	80 91 12 01 	lds	r24, 0x0112
			e_pass[i]='7';
 1de:	90 91 13 01 	lds	r25, 0x0113
 1e2:	f8 01       	movw	r30, r16
 1e4:	e8 0f       	add	r30, r24
 1e6:	f9 1f       	adc	r31, r25
 1e8:	d0 82       	st	Z, r13
 1ea:	01 96       	adiw	r24, 0x01	; 1
			i++;
 1ec:	90 93 13 01 	sts	0x0113, r25
 1f0:	80 93 12 01 	sts	0x0112, r24
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	90 e7       	ldi	r25, 0x70	; 112
 1f8:	a2 e0       	ldi	r26, 0x02	; 2
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	a0 40       	sbci	r26, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <keyscan+0xb4>
 202:	00 c0       	rjmp	.+0      	; 0x204 <keyscan+0xbe>
 204:	00 00       	nop
 206:	37 c0       	rjmp	.+110    	; 0x276 <keyscan+0x130>
 208:	81 99       	sbic	0x10, 1	; 16
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
 20a:	19 c0       	rjmp	.+50     	; 0x23e <keyscan+0xf8>
 20c:	c7 01       	movw	r24, r14
		{
			lcdstring("*");
 20e:	84 df       	rcall	.-248    	; 0x118 <lcdstring>
 210:	80 91 12 01 	lds	r24, 0x0112
			e_pass[i]='4';
 214:	90 91 13 01 	lds	r25, 0x0113
 218:	f8 01       	movw	r30, r16
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	b0 82       	st	Z, r11
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 13 01 	sts	0x0113, r25
			i++;
 226:	80 93 12 01 	sts	0x0112, r24
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	90 e7       	ldi	r25, 0x70	; 112
 22e:	a2 e0       	ldi	r26, 0x02	; 2
 230:	81 50       	subi	r24, 0x01	; 1
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	a0 40       	sbci	r26, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <keyscan+0xea>
 238:	00 c0       	rjmp	.+0      	; 0x23a <keyscan+0xf4>
 23a:	00 00       	nop
 23c:	1c c0       	rjmp	.+56     	; 0x276 <keyscan+0x130>
 23e:	82 99       	sbic	0x10, 2	; 16
 240:	19 c0       	rjmp	.+50     	; 0x274 <keyscan+0x12e>
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
 242:	c7 01       	movw	r24, r14
 244:	69 df       	rcall	.-302    	; 0x118 <lcdstring>
		{
			lcdstring("*");
 246:	80 91 12 01 	lds	r24, 0x0112
 24a:	90 91 13 01 	lds	r25, 0x0113
			e_pass[i]='1';
 24e:	f8 01       	movw	r30, r16
 250:	e8 0f       	add	r30, r24
 252:	f9 1f       	adc	r31, r25
 254:	80 82       	st	Z, r8
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 13 01 	sts	0x0113, r25
			i++;
 25c:	80 93 12 01 	sts	0x0112, r24
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	90 e7       	ldi	r25, 0x70	; 112
 264:	a2 e0       	ldi	r26, 0x02	; 2
 266:	81 50       	subi	r24, 0x01	; 1
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	a0 40       	sbci	r26, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <keyscan+0x120>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <keyscan+0x12a>
 270:	00 00       	nop
 272:	01 c0       	rjmp	.+2      	; 0x276 <keyscan+0x130>
 274:	80 b3       	in	r24, 0x10	; 16
 276:	c2 bb       	out	0x12, r28	; 18
 278:	d1 bb       	out	0x11, r29	; 17
			_delay_ms(100);
		}
		else if(!(PIND&8<<0))
 27a:	82 b3       	in	r24, 0x12	; 18
	{	}
		PORTD=0x0f;
 27c:	80 6d       	ori	r24, 0xD0	; 208
		DDRD=0xf0;
 27e:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|(1<<4)|(1<<6)|(1<<7);
 280:	80 99       	sbic	0x10, 0	; 16
 282:	19 c0       	rjmp	.+50     	; 0x2b6 <keyscan+0x170>
 284:	c7 01       	movw	r24, r14
		if(!(PIND&1<<0))
 286:	48 df       	rcall	.-368    	; 0x118 <lcdstring>
 288:	80 91 12 01 	lds	r24, 0x0112
		{
			lcdstring("*");
 28c:	90 91 13 01 	lds	r25, 0x0113
			e_pass[i]='8';
 290:	f8 01       	movw	r30, r16
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	c0 82       	st	Z, r12
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 13 01 	sts	0x0113, r25
 29e:	80 93 12 01 	sts	0x0112, r24
			i++;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	90 e7       	ldi	r25, 0x70	; 112
 2a6:	a2 e0       	ldi	r26, 0x02	; 2
 2a8:	81 50       	subi	r24, 0x01	; 1
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	a0 40       	sbci	r26, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <keyscan+0x162>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <keyscan+0x16c>
 2b2:	00 00       	nop
 2b4:	50 c0       	rjmp	.+160    	; 0x356 <keyscan+0x210>
 2b6:	81 99       	sbic	0x10, 1	; 16
 2b8:	19 c0       	rjmp	.+50     	; 0x2ec <keyscan+0x1a6>
 2ba:	c7 01       	movw	r24, r14
 2bc:	2d df       	rcall	.-422    	; 0x118 <lcdstring>
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
 2be:	80 91 12 01 	lds	r24, 0x0112
		{
			lcdstring("*");
 2c2:	90 91 13 01 	lds	r25, 0x0113
 2c6:	f8 01       	movw	r30, r16
			e_pass[i]='5';
 2c8:	e8 0f       	add	r30, r24
 2ca:	f9 1f       	adc	r31, r25
 2cc:	a0 82       	st	Z, r10
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 13 01 	sts	0x0113, r25
 2d4:	80 93 12 01 	sts	0x0112, r24
			i++;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	90 e7       	ldi	r25, 0x70	; 112
 2dc:	a2 e0       	ldi	r26, 0x02	; 2
 2de:	81 50       	subi	r24, 0x01	; 1
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	a0 40       	sbci	r26, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <keyscan+0x198>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <keyscan+0x1a2>
 2e8:	00 00       	nop
 2ea:	35 c0       	rjmp	.+106    	; 0x356 <keyscan+0x210>
 2ec:	82 99       	sbic	0x10, 2	; 16
 2ee:	19 c0       	rjmp	.+50     	; 0x322 <keyscan+0x1dc>
 2f0:	c7 01       	movw	r24, r14
 2f2:	12 df       	rcall	.-476    	; 0x118 <lcdstring>
 2f4:	80 91 12 01 	lds	r24, 0x0112
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
 2f8:	90 91 13 01 	lds	r25, 0x0113
		{
			lcdstring("*");
 2fc:	f8 01       	movw	r30, r16
 2fe:	e8 0f       	add	r30, r24
			e_pass[i]='2';
 300:	f9 1f       	adc	r31, r25
 302:	70 82       	st	Z, r7
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 13 01 	sts	0x0113, r25
 30a:	80 93 12 01 	sts	0x0112, r24
 30e:	8f ef       	ldi	r24, 0xFF	; 255
			i++;
 310:	90 e7       	ldi	r25, 0x70	; 112
 312:	a2 e0       	ldi	r26, 0x02	; 2
 314:	81 50       	subi	r24, 0x01	; 1
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	a0 40       	sbci	r26, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <keyscan+0x1ce>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <keyscan+0x1d8>
 31e:	00 00       	nop
 320:	1a c0       	rjmp	.+52     	; 0x356 <keyscan+0x210>
 322:	83 99       	sbic	0x10, 3	; 16
 324:	18 c0       	rjmp	.+48     	; 0x356 <keyscan+0x210>
 326:	c7 01       	movw	r24, r14
 328:	f7 de       	rcall	.-530    	; 0x118 <lcdstring>
 32a:	80 91 12 01 	lds	r24, 0x0112
			_delay_ms(100);
		}
		else if(!(PIND&8<<0))
 32e:	90 91 13 01 	lds	r25, 0x0113
		{
			lcdstring("*");
 332:	f8 01       	movw	r30, r16
 334:	e8 0f       	add	r30, r24
 336:	f9 1f       	adc	r31, r25
			e_pass[i]='0';
 338:	50 82       	st	Z, r5
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 13 01 	sts	0x0113, r25
 340:	80 93 12 01 	sts	0x0112, r24
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	90 e7       	ldi	r25, 0x70	; 112
			i++;
 348:	a2 e0       	ldi	r26, 0x02	; 2
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	a0 40       	sbci	r26, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <keyscan+0x204>
 352:	00 c0       	rjmp	.+0      	; 0x354 <keyscan+0x20e>
 354:	00 00       	nop
 356:	c2 bb       	out	0x12, r28	; 18
 358:	d1 bb       	out	0x11, r29	; 17
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	80 6b       	ori	r24, 0xB0	; 176
 35e:	82 bb       	out	0x12, r24	; 18
 360:	80 99       	sbic	0x10, 0	; 16
 362:	1a c0       	rjmp	.+52     	; 0x398 <keyscan+0x252>
			_delay_ms(100);
		}
		PORTD=0x0f;
 364:	c7 01       	movw	r24, r14
		DDRD=0xf0;
 366:	d8 de       	rcall	.-592    	; 0x118 <lcdstring>
		PORTD=PORTD|(1<<4)|(1<<5)|(1<<7);
 368:	80 91 12 01 	lds	r24, 0x0112
 36c:	90 91 13 01 	lds	r25, 0x0113
		if(!(PIND&1<<0))
 370:	f8 01       	movw	r30, r16
		{
			lcdstring("*");
 372:	e8 0f       	add	r30, r24
 374:	f9 1f       	adc	r31, r25
 376:	29 e3       	ldi	r18, 0x39	; 57
			e_pass[i]='9';
 378:	20 83       	st	Z, r18
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 13 01 	sts	0x0113, r25
 380:	80 93 12 01 	sts	0x0112, r24
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	90 e7       	ldi	r25, 0x70	; 112
 388:	a2 e0       	ldi	r26, 0x02	; 2
			i++;
 38a:	81 50       	subi	r24, 0x01	; 1
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	a0 40       	sbci	r26, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <keyscan+0x244>
 392:	00 c0       	rjmp	.+0      	; 0x394 <keyscan+0x24e>
 394:	00 00       	nop
 396:	37 c0       	rjmp	.+110    	; 0x406 <keyscan+0x2c0>
 398:	81 99       	sbic	0x10, 1	; 16
 39a:	19 c0       	rjmp	.+50     	; 0x3ce <keyscan+0x288>
 39c:	c7 01       	movw	r24, r14
 39e:	bc de       	rcall	.-648    	; 0x118 <lcdstring>
 3a0:	80 91 12 01 	lds	r24, 0x0112
 3a4:	90 91 13 01 	lds	r25, 0x0113
			_delay_ms(100);
		}
		else if(!(PIND&2<<0))
 3a8:	f8 01       	movw	r30, r16
 3aa:	e8 0f       	add	r30, r24
		{
			lcdstring("*");
 3ac:	f9 1f       	adc	r31, r25
 3ae:	90 82       	st	Z, r9
 3b0:	01 96       	adiw	r24, 0x01	; 1
			e_pass[i]='6';
 3b2:	90 93 13 01 	sts	0x0113, r25
 3b6:	80 93 12 01 	sts	0x0112, r24
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	90 e7       	ldi	r25, 0x70	; 112
 3be:	a2 e0       	ldi	r26, 0x02	; 2
 3c0:	81 50       	subi	r24, 0x01	; 1
			i++;
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	a0 40       	sbci	r26, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <keyscan+0x27a>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <keyscan+0x284>
 3ca:	00 00       	nop
 3cc:	1c c0       	rjmp	.+56     	; 0x406 <keyscan+0x2c0>
 3ce:	82 99       	sbic	0x10, 2	; 16
 3d0:	19 c0       	rjmp	.+50     	; 0x404 <keyscan+0x2be>
 3d2:	c7 01       	movw	r24, r14
 3d4:	a1 de       	rcall	.-702    	; 0x118 <lcdstring>
 3d6:	80 91 12 01 	lds	r24, 0x0112
 3da:	90 91 13 01 	lds	r25, 0x0113
 3de:	f8 01       	movw	r30, r16
			_delay_ms(100);
		}
		else if(!(PIND&4<<0))
 3e0:	e8 0f       	add	r30, r24
 3e2:	f9 1f       	adc	r31, r25
		{
			lcdstring("*");
 3e4:	60 82       	st	Z, r6
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 13 01 	sts	0x0113, r25
			e_pass[i]='3';
 3ec:	80 93 12 01 	sts	0x0112, r24
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	90 e7       	ldi	r25, 0x70	; 112
 3f4:	a2 e0       	ldi	r26, 0x02	; 2
 3f6:	81 50       	subi	r24, 0x01	; 1
 3f8:	90 40       	sbci	r25, 0x00	; 0
			i++;
 3fa:	a0 40       	sbci	r26, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <keyscan+0x2b0>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <keyscan+0x2ba>
 400:	00 00       	nop
 402:	01 c0       	rjmp	.+2      	; 0x406 <keyscan+0x2c0>
 404:	80 b3       	in	r24, 0x10	; 16
 406:	80 91 12 01 	lds	r24, 0x0112
 40a:	90 91 13 01 	lds	r25, 0x0113
 40e:	85 30       	cpi	r24, 0x05	; 5
 410:	91 05       	cpc	r25, r1
 412:	0c f4       	brge	.+2      	; 0x416 <keyscan+0x2d0>
 414:	d9 ce       	rjmp	.-590    	; 0x1c8 <keyscan+0x82>
 416:	8c 5e       	subi	r24, 0xEC	; 236
			_delay_ms(100);
		}
		else if(!(PIND&8<<0))
 418:	9e 4f       	sbci	r25, 0xFE	; 254
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	i=0;
	while(i<5)
 41a:	dc 01       	movw	r26, r24
 41c:	1c 92       	st	X, r1
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
			_delay_ms(100);
		}
		else if(!(PIND&8<<0))
	{	}
	}
	e_pass[i]='\0';
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
	
}
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	5f 90       	pop	r5
 43c:	08 95       	ret

0000043e <check>:
 43e:	84 e1       	ldi	r24, 0x14	; 20
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	69 e0       	ldi	r22, 0x09	; 9
 444:	71 e0       	ldi	r23, 0x01	; 1
 446:	f0 d0       	rcall	.+480    	; 0x628 <strcmp>
 448:	28 2f       	mov	r18, r24
 44a:	39 2f       	mov	r19, r25
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	b1 f4       	brne	.+44     	; 0x47e <__stack+0x1f>
	lcddata((x<<4)&(0xf0));
}
void check()
{
	
	if(strcmp(e_pass,s_pass)==0)
 452:	82 e6       	ldi	r24, 0x62	; 98
	{
		lcdstring("PASSWORD");
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	60 de       	rcall	.-832    	; 0x118 <lcdstring>
 458:	80 ec       	ldi	r24, 0xC0	; 192
 45a:	3c de       	rcall	.-904    	; 0xd4 <cmdbreak>
		cmdbreak(0xc0);
 45c:	8b e6       	ldi	r24, 0x6B	; 107
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	5b de       	rcall	.-842    	; 0x118 <lcdstring>
		lcdstring("ACCEPTED");
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	90 e7       	ldi	r25, 0x70	; 112
 466:	a2 e0       	ldi	r26, 0x02	; 2
 468:	81 50       	subi	r24, 0x01	; 1
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	a0 40       	sbci	r26, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__stack+0x9>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__stack+0x13>
 472:	00 00       	nop
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	2e de       	rcall	.-932    	; 0xd4 <cmdbreak>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(100);
		cmdbreak(0x01);
 47c:	ed d0       	rcall	.+474    	; 0x658 <_exit>
 47e:	84 e7       	ldi	r24, 0x74	; 116
 480:	90 e0       	ldi	r25, 0x00	; 0
		exit(0);
 482:	4a de       	rcall	.-876    	; 0x118 <lcdstring>
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	26 de       	rcall	.-948    	; 0xd4 <cmdbreak>
 488:	82 e6       	ldi	r24, 0x62	; 98
	}
	else
	{
		lcdstring("INCORRECT");
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	45 de       	rcall	.-886    	; 0x118 <lcdstring>
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	91 ee       	ldi	r25, 0xE1	; 225
		cmdbreak(0xc0);
 492:	a4 e0       	ldi	r26, 0x04	; 4
 494:	81 50       	subi	r24, 0x01	; 1
 496:	90 40       	sbci	r25, 0x00	; 0
		lcdstring("PASSWORD");
 498:	a0 40       	sbci	r26, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__stack+0x35>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__stack+0x3f>
 49e:	00 00       	nop
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	18 de       	rcall	.-976    	; 0xd4 <cmdbreak>
 4a4:	8e e7       	ldi	r24, 0x7E	; 126
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	37 de       	rcall	.-914    	; 0x118 <lcdstring>
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	90 e7       	ldi	r25, 0x70	; 112
 4ae:	a2 e0       	ldi	r26, 0x02	; 2
 4b0:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(200);
		cmdbreak(0x01);
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	a0 40       	sbci	r26, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__stack+0x51>
		lcdstring("TYPE AGAIN");
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__stack+0x5b>
 4ba:	00 00       	nop
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0a ce       	rjmp	.-1004   	; 0xd4 <cmdbreak>

000004c0 <delay>:
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	91 e1       	ldi	r25, 0x11	; 17
 4c4:	aa e7       	ldi	r26, 0x7A	; 122
 4c6:	81 50       	subi	r24, 0x01	; 1
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	a0 40       	sbci	r26, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <delay+0x6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <delay+0x10>
 4d0:	00 00       	nop
		_delay_ms(100);
		cmdbreak(0x01);
 4d2:	8e e7       	ldi	r24, 0x7E	; 126
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	20 de       	rcall	.-960    	; 0x118 <lcdstring>
	}
}
 4d8:	81 e0       	ldi	r24, 0x01	; 1
void delay()
{
	_delay_ms(5000);
	lcdstring("TYPE AGAIN");
	cmdbreak(0x01);
 4da:	fc cd       	rjmp	.-1032   	; 0xd4 <cmdbreak>

000004dc <change>:
 4dc:	89 e8       	ldi	r24, 0x89	; 137
 4de:	90 e0       	ldi	r25, 0x00	; 0
	
}
 4e0:	1b de       	rcall	.-970    	; 0x118 <lcdstring>
void change()
{
	lcdstring("ORIGINAL "); cmdbreak(0xc0);
 4e2:	80 ec       	ldi	r24, 0xC0	; 192
 4e4:	f7 dd       	rcall	.-1042   	; 0xd4 <cmdbreak>
 4e6:	83 e9       	ldi	r24, 0x93	; 147
 4e8:	90 e0       	ldi	r25, 0x00	; 0
	lcdstring("PASSWORD "); cmdbreak(0x01);
 4ea:	16 de       	rcall	.-980    	; 0x118 <lcdstring>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	f2 dd       	rcall	.-1052   	; 0xd4 <cmdbreak>
 4f0:	2a de       	rcall	.-940    	; 0x146 <keyscan>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	ef dd       	rcall	.-1058   	; 0xd4 <cmdbreak>
 4f6:	84 e1       	ldi	r24, 0x14	; 20
	keyscan(); cmdbreak(0x01);
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	69 e0       	ldi	r22, 0x09	; 9
 4fc:	71 e0       	ldi	r23, 0x01	; 1
 4fe:	94 d0       	rcall	.+296    	; 0x628 <strcmp>
 500:	28 2f       	mov	r18, r24
	if(strcmp(e_pass,s_pass)==0)
 502:	39 2f       	mov	r19, r25
 504:	21 15       	cp	r18, r1
 506:	31 05       	cpc	r19, r1
 508:	51 f5       	brne	.+84     	; 0x55e <change+0x82>
 50a:	8d e9       	ldi	r24, 0x9D	; 157
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	04 de       	rcall	.-1016   	; 0x118 <lcdstring>
 510:	80 ec       	ldi	r24, 0xC0	; 192
 512:	e0 dd       	rcall	.-1088   	; 0xd4 <cmdbreak>
 514:	82 e6       	ldi	r24, 0x62	; 98
 516:	90 e0       	ldi	r25, 0x00	; 0
	{
		lcdstring("TYPE NEW"); cmdbreak(0xc0);
 518:	ff dd       	rcall	.-1026   	; 0x118 <lcdstring>
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	91 ee       	ldi	r25, 0xE1	; 225
 51e:	a4 e0       	ldi	r26, 0x04	; 4
 520:	81 50       	subi	r24, 0x01	; 1
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	a0 40       	sbci	r26, 0x00	; 0
		lcdstring("PASSWORD"); _delay_ms(200); cmdbreak(0x01);
 526:	e1 f7       	brne	.-8      	; 0x520 <change+0x44>
 528:	00 c0       	rjmp	.+0      	; 0x52a <change+0x4e>
 52a:	00 00       	nop
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	d2 dd       	rcall	.-1116   	; 0xd4 <cmdbreak>
 530:	0a de       	rcall	.-1004   	; 0x146 <keyscan>
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	cf dd       	rcall	.-1122   	; 0xd4 <cmdbreak>
 536:	89 e0       	ldi	r24, 0x09	; 9
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	64 e1       	ldi	r22, 0x14	; 20
 53c:	71 e0       	ldi	r23, 0x01	; 1
 53e:	46 e0       	ldi	r20, 0x06	; 6
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	7b d0       	rcall	.+246    	; 0x63a <strncpy>
 544:	86 ea       	ldi	r24, 0xA6	; 166
		keyscan();
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	e7 dd       	rcall	.-1074   	; 0x118 <lcdstring>
		cmdbreak(0x01);
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	c3 dd       	rcall	.-1146   	; 0xd4 <cmdbreak>
 54e:	fb dd       	rcall	.-1034   	; 0x146 <keyscan>
		strncpy(s_pass,e_pass,6);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	c0 dd       	rcall	.-1152   	; 0xd4 <cmdbreak>
 554:	10 92 11 01 	sts	0x0111, r1
 558:	10 92 10 01 	sts	0x0110, r1
 55c:	70 cf       	rjmp	.-288    	; 0x43e <check>
 55e:	87 eb       	ldi	r24, 0xB7	; 183
		lcdstring("PASSWORD CHANGED");  cmdbreak(0x01);
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	da dd       	rcall	.-1100   	; 0x118 <lcdstring>
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	b6 dd       	rcall	.-1172   	; 0xd4 <cmdbreak>
 568:	82 ec       	ldi	r24, 0xC2	; 194
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	d5 dd       	rcall	.-1110   	; 0x118 <lcdstring>
		keyscan();	cmdbreak(0x01);   n=0;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	b1 dd       	rcall	.-1182   	; 0xd4 <cmdbreak>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	70 d0       	rcall	.+224    	; 0x658 <_exit>

00000578 <main>:
 578:	d8 98       	cbi	0x1b, 0	; 27
 57a:	d0 98       	cbi	0x1a, 0	; 26
 57c:	b5 dd       	rcall	.-1174   	; 0xe8 <init_lcd>
 57e:	cb ec       	ldi	r28, 0xCB	; 203
		check(); 
 580:	d0 e0       	ldi	r29, 0x00	; 0
 582:	0a ed       	ldi	r16, 0xDA	; 218
	{
		lcdstring("YOU ARE AN"); cmdbreak(0xc0);
		lcdstring("INTRUDER"); cmdbreak(0x01);
		exit(0);
	}
 584:	10 e0       	ldi	r17, 0x00	; 0
		keyscan();	cmdbreak(0x01);   n=0;
		check(); 
	}
	else
	{
		lcdstring("YOU ARE AN"); cmdbreak(0xc0);
 586:	0f 2e       	mov	r0, r31
 588:	fa ee       	ldi	r31, 0xEA	; 234
 58a:	ef 2e       	mov	r14, r31
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	ff 2e       	mov	r15, r31
 590:	f0 2d       	mov	r31, r0
 592:	0f 2e       	mov	r0, r31
		lcdstring("INTRUDER"); cmdbreak(0x01);
 594:	f7 ef       	ldi	r31, 0xF7	; 247
 596:	cf 2e       	mov	r12, r31
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	df 2e       	mov	r13, r31
 59c:	f0 2d       	mov	r31, r0
 59e:	80 91 10 01 	lds	r24, 0x0110
		exit(0);
 5a2:	90 91 11 01 	lds	r25, 0x0111
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	91 05       	cpc	r25, r1
	PORTA&=~(1<<0);
	DDRA&=~(1<<0);
	init_lcd();
	while (1)
	{
		if(n<=1)
 5aa:	94 f4       	brge	.+36     	; 0x5d0 <main+0x58>
 5ac:	cc dd       	rcall	.-1128   	; 0x146 <keyscan>
		{
			keyscan();
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	91 dd       	rcall	.-1246   	; 0xd4 <cmdbreak>
			cmdbreak(0x01);
 5b2:	45 df       	rcall	.-374    	; 0x43e <check>
 5b4:	10 92 13 01 	sts	0x0113, r1
			check();
 5b8:	10 92 12 01 	sts	0x0112, r1
			i=0;
 5bc:	80 91 10 01 	lds	r24, 0x0110
 5c0:	90 91 11 01 	lds	r25, 0x0111
			n++;
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	90 93 11 01 	sts	0x0111, r25
 5ca:	80 93 10 01 	sts	0x0110, r24
 5ce:	e7 cf       	rjmp	.-50     	; 0x59e <main+0x26>
 5d0:	ce 01       	movw	r24, r28
 5d2:	a2 dd       	rcall	.-1212   	; 0x118 <lcdstring>
 5d4:	80 ec       	ldi	r24, 0xC0	; 192
 5d6:	7e dd       	rcall	.-1284   	; 0xd4 <cmdbreak>
		}
		else
		{
			lcdstring("WANT TO RESET "); cmdbreak(0xc0);
 5d8:	c8 01       	movw	r24, r16
 5da:	9e dd       	rcall	.-1220   	; 0x118 <lcdstring>
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	99 e6       	ldi	r25, 0x69	; 105
 5e0:	a8 e1       	ldi	r26, 0x18	; 24
 5e2:	81 50       	subi	r24, 0x01	; 1
			lcdstring("YOUR PASSWORD ?"); _delay_ms(1000); cmdbreak(0x01);
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	a0 40       	sbci	r26, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x6a>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x74>
 5ec:	00 00       	nop
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	71 dd       	rcall	.-1310   	; 0xd4 <cmdbreak>
 5f2:	c8 9b       	sbis	0x19, 0	; 25
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <main+0x82>
 5f6:	72 df       	rcall	.-284    	; 0x4dc <change>
 5f8:	d2 cf       	rjmp	.-92     	; 0x59e <main+0x26>
 5fa:	c7 01       	movw	r24, r14
 5fc:	8d dd       	rcall	.-1254   	; 0x118 <lcdstring>
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	69 dd       	rcall	.-1326   	; 0xd4 <cmdbreak>
			if(PINA&(1<<0))
 602:	c6 01       	movw	r24, r12
 604:	89 dd       	rcall	.-1262   	; 0x118 <lcdstring>
			{
				change();
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	91 ee       	ldi	r25, 0xE1	; 225
 60a:	a4 e0       	ldi	r26, 0x04	; 4
			}
			else
			{
				lcdstring("TRY IT AGAIN");
 60c:	81 50       	subi	r24, 0x01	; 1
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	a0 40       	sbci	r26, 0x00	; 0
				cmdbreak(0xc0);
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x94>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x9e>
 616:	00 00       	nop
				lcdstring("AFTER 30 Seconds.");
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	5c dd       	rcall	.-1352   	; 0xd4 <cmdbreak>
 61c:	51 df       	rcall	.-350    	; 0x4c0 <delay>
 61e:	10 92 11 01 	sts	0x0111, r1
 622:	10 92 10 01 	sts	0x0110, r1
 626:	bb cf       	rjmp	.-138    	; 0x59e <main+0x26>

00000628 <strcmp>:
 628:	fb 01       	movw	r30, r22
 62a:	dc 01       	movw	r26, r24
 62c:	8d 91       	ld	r24, X+
 62e:	01 90       	ld	r0, Z+
				_delay_ms(200);
				cmdbreak(0x01);
 630:	80 19       	sub	r24, r0
 632:	01 10       	cpse	r0, r1
 634:	d9 f3       	breq	.-10     	; 0x62c <strcmp+0x4>
				delay();
 636:	99 0b       	sbc	r25, r25
 638:	08 95       	ret

0000063a <strncpy>:
				n=0;
 63a:	fb 01       	movw	r30, r22
 63c:	dc 01       	movw	r26, r24
 63e:	41 50       	subi	r20, 0x01	; 1
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	48 f0       	brcs	.+18     	; 0x656 <strncpy+0x1c>
 644:	01 90       	ld	r0, Z+
 646:	0d 92       	st	X+, r0
 648:	00 20       	and	r0, r0
 64a:	c9 f7       	brne	.-14     	; 0x63e <strncpy+0x4>
 64c:	01 c0       	rjmp	.+2      	; 0x650 <strncpy+0x16>
 64e:	1d 92       	st	X+, r1
 650:	41 50       	subi	r20, 0x01	; 1
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	e0 f7       	brcc	.-8      	; 0x64e <strncpy+0x14>
 656:	08 95       	ret

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
