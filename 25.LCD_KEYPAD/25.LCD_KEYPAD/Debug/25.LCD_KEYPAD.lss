
25.LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000d8  00000000  00000000  00000b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ee  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091f  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015b  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000facc  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00011b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	cc d0       	rcall	.+408    	; 0x220 <main>
  88:	d1 c0       	rjmp	.+418    	; 0x22c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcdcmd>:
		_delay_ms(100);
	}
}
void lcdcmd(char x)
{
	PORTC=x;
  8c:	85 bb       	out	0x15, r24	; 21
	PORTC&=~(1<<rs);  //rs=0 ==>Select Command Register
  8e:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To Write
  90:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  92:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcdcmd+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcdcmd+0x12>
  9e:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  a0:	aa 98       	cbi	0x15, 2	; 21
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x1a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x20>
  ac:	00 00       	nop
	_delay_ms(2);
}
  ae:	08 95       	ret

000000b0 <lcddata>:
void lcddata(char x)
{
	PORTC=x;
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<rs);   //rs=1 ==>Select Data register
  b2:	a8 9a       	sbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To write
  b4:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  b6:	aa 9a       	sbi	0x15, 2	; 21
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcddata+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcddata+0x12>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  c4:	aa 98       	cbi	0x15, 2	; 21
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcddata+0x1a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcddata+0x20>
  d0:	00 00       	nop
	_delay_ms(2);
	
}
  d2:	08 95       	ret

000000d4 <cmdbreak>:
void cmdbreak(char x)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	lcdcmd(x&(0xf0));
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	d8 df       	rcall	.-80     	; 0x8c <lcdcmd>
  dc:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	d4 df       	rcall	.-88     	; 0x8c <lcdcmd>
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <init_lcd>:
}
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	}
	return 0;
}
void init_lcd()
{
	DDRC=0xff; DDRD=7<<0;
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	81 bb       	out	0x11, r24	; 17
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	f0 df       	rcall	.-32     	; 0xd4 <cmdbreak>
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	ee df       	rcall	.-36     	; 0xd4 <cmdbreak>
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	ec df       	rcall	.-40     	; 0xd4 <cmdbreak>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	ea df       	rcall	.-44     	; 0xd4 <cmdbreak>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	e8 cf       	rjmp	.-48     	; 0xd4 <cmdbreak>

00000104 <databreak>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	d2 df       	rcall	.-92     	; 0xb0 <lcddata>
 10c:	8c 2f       	mov	r24, r28
}
 10e:	82 95       	swap	r24
	lcdcmd((x<<4)&(0xf0));
}
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	ce df       	rcall	.-100    	; 0xb0 <lcddata>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcdstring>:
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	lcdstring("Key + is pressed");
	
	
}
void lcdstring(char *p)
{
 11c:	ec 01       	movw	r28, r24
	while(*p!=0)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	71 f0       	breq	.+28     	; 0x140 <lcdstring+0x28>
	if(!(PIND&8<<0))
	lcdstring("Key + is pressed");
	
	
}
void lcdstring(char *p)
 124:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!=0)
	{
		databreak(*p);
 126:	ee df       	rcall	.-36     	; 0x104 <databreak>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	90 e7       	ldi	r25, 0x70	; 112
 12c:	a2 e0       	ldi	r26, 0x02	; 2
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	a0 40       	sbci	r26, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcdstring+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcdstring+0x20>
 138:	00 00       	nop
 13a:	89 91       	ld	r24, Y+
	
	
}
void lcdstring(char *p)
{
	while(*p!=0)
 13c:	88 23       	and	r24, r24
 13e:	99 f7       	brne	.-26     	; 0x126 <lcdstring+0xe>
 140:	df 91       	pop	r29
	{
		databreak(*p);
		p++;
		_delay_ms(100);
	}
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <keyscan>:
 146:	8f e0       	ldi	r24, 0x0F	; 15
	DDRC=0xff; DDRD=7<<0;
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	PORTD=0x0f;
 148:	82 bb       	out	0x12, r24	; 18
	DDRD=0xf0;
 14a:	80 ef       	ldi	r24, 0xF0	; 240
 14c:	81 bb       	out	0x11, r24	; 17
	PORTD=PORTD|(1<<5)|(1<<6)|(1<<7);
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	80 6e       	ori	r24, 0xE0	; 224
 152:	82 bb       	out	0x12, r24	; 18
	if(!(PIND&1<<0))
 154:	80 99       	sbic	0x10, 0	; 16
 156:	03 c0       	rjmp	.+6      	; 0x15e <keyscan+0x18>
	lcdstring("Key 7 is pressed");
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	dd df       	rcall	.-70     	; 0x118 <lcdstring>
 15e:	81 99       	sbic	0x10, 1	; 16
	if(!(PIND&2<<0))
 160:	03 c0       	rjmp	.+6      	; 0x168 <keyscan+0x22>
 162:	81 e7       	ldi	r24, 0x71	; 113
	lcdstring("Key 4 is pressed");
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	d8 df       	rcall	.-80     	; 0x118 <lcdstring>
 168:	82 99       	sbic	0x10, 2	; 16
 16a:	03 c0       	rjmp	.+6      	; 0x172 <keyscan+0x2c>
	if(!(PIND&4<<0))
 16c:	82 e8       	ldi	r24, 0x82	; 130
 16e:	90 e0       	ldi	r25, 0x00	; 0
	lcdstring("Key 1 is pressed");
 170:	d3 df       	rcall	.-90     	; 0x118 <lcdstring>
 172:	83 99       	sbic	0x10, 3	; 16
 174:	03 c0       	rjmp	.+6      	; 0x17c <keyscan+0x36>
 176:	83 e9       	ldi	r24, 0x93	; 147
	if(!(PIND&8<<0))
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ce df       	rcall	.-100    	; 0x118 <lcdstring>
	lcdstring("Key ON is pressed");
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	82 bb       	out	0x12, r24	; 18
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	81 bb       	out	0x11, r24	; 17
	PORTD=0x0f;
 184:	82 b3       	in	r24, 0x12	; 18
 186:	80 6d       	ori	r24, 0xD0	; 208
	DDRD=0xf0;
 188:	82 bb       	out	0x12, r24	; 18
 18a:	80 99       	sbic	0x10, 0	; 16
	PORTD=PORTD|(1<<4)|(1<<6)|(1<<7);
 18c:	03 c0       	rjmp	.+6      	; 0x194 <keyscan+0x4e>
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	90 e0       	ldi	r25, 0x00	; 0
	if(!(PIND&1<<0))
 192:	c2 df       	rcall	.-124    	; 0x118 <lcdstring>
 194:	81 99       	sbic	0x10, 1	; 16
	lcdstring("Key 8 is pressed");
 196:	03 c0       	rjmp	.+6      	; 0x19e <keyscan+0x58>
 198:	86 eb       	ldi	r24, 0xB6	; 182
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	bd df       	rcall	.-134    	; 0x118 <lcdstring>
	if(!(PIND&2<<0))
 19e:	82 99       	sbic	0x10, 2	; 16
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <keyscan+0x62>
	lcdstring("Key 5 is pressed");
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	b8 df       	rcall	.-144    	; 0x118 <lcdstring>
 1a8:	83 99       	sbic	0x10, 3	; 16
	if(!(PIND&4<<0))
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <keyscan+0x6c>
 1ac:	88 ed       	ldi	r24, 0xD8	; 216
	lcdstring("Key 2 is pressed");
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	b3 df       	rcall	.-154    	; 0x118 <lcdstring>
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	82 bb       	out	0x12, r24	; 18
	if(!(PIND&8<<0))
 1b6:	80 ef       	ldi	r24, 0xF0	; 240
 1b8:	81 bb       	out	0x11, r24	; 17
	lcdstring("Key 0 is pressed");
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	80 6b       	ori	r24, 0xB0	; 176
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	80 99       	sbic	0x10, 0	; 16
	PORTD=0x0f;
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <keyscan+0x84>
 1c4:	89 ee       	ldi	r24, 0xE9	; 233
	DDRD=0xf0;
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a7 df       	rcall	.-178    	; 0x118 <lcdstring>
	PORTD=PORTD|(1<<4)|(1<<5)|(1<<7);
 1ca:	81 99       	sbic	0x10, 1	; 16
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <keyscan+0x8e>
 1ce:	8a ef       	ldi	r24, 0xFA	; 250
	if(!(PIND&1<<0))
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	a2 df       	rcall	.-188    	; 0x118 <lcdstring>
	lcdstring("Key 9 is pressed");
 1d4:	82 99       	sbic	0x10, 2	; 16
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <keyscan+0x98>
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	91 e0       	ldi	r25, 0x01	; 1
	if(!(PIND&2<<0))
 1dc:	9d df       	rcall	.-198    	; 0x118 <lcdstring>
 1de:	83 99       	sbic	0x10, 3	; 16
	lcdstring("Key 6 is pressed");
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <keyscan+0xa2>
 1e2:	8c e1       	ldi	r24, 0x1C	; 28
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	98 df       	rcall	.-208    	; 0x118 <lcdstring>
	if(!(PIND&4<<0))
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	82 bb       	out	0x12, r24	; 18
	lcdstring("Key 3 is pressed");
 1ec:	80 ef       	ldi	r24, 0xF0	; 240
 1ee:	81 bb       	out	0x11, r24	; 17
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	80 67       	ori	r24, 0x70	; 112
	if(!(PIND&8<<0))
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	80 99       	sbic	0x10, 0	; 16
	lcdstring("Key = is pressed");
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <keyscan+0xba>
 1fa:	8d e2       	ldi	r24, 0x2D	; 45
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	8c df       	rcall	.-232    	; 0x118 <lcdstring>
	PORTD=0x0f;
 200:	81 99       	sbic	0x10, 1	; 16
 202:	03 c0       	rjmp	.+6      	; 0x20a <keyscan+0xc4>
	DDRD=0xf0;
 204:	8e e3       	ldi	r24, 0x3E	; 62
 206:	91 e0       	ldi	r25, 0x01	; 1
	PORTD=PORTD|(1<<4)|(1<<5)|(1<<6);
 208:	87 df       	rcall	.-242    	; 0x118 <lcdstring>
 20a:	82 99       	sbic	0x10, 2	; 16
 20c:	03 c0       	rjmp	.+6      	; 0x214 <keyscan+0xce>
	if(!(PIND&1<<0))
 20e:	8f e4       	ldi	r24, 0x4F	; 79
 210:	91 e0       	ldi	r25, 0x01	; 1
	lcdstring("Key / is pressed");
 212:	82 df       	rcall	.-252    	; 0x118 <lcdstring>
 214:	83 99       	sbic	0x10, 3	; 16
 216:	03 c0       	rjmp	.+6      	; 0x21e <keyscan+0xd8>
 218:	80 e6       	ldi	r24, 0x60	; 96
	if(!(PIND&2<<0))
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	7d cf       	rjmp	.-262    	; 0x118 <lcdstring>
	lcdstring("Key x is pressed");
 21e:	08 95       	ret

00000220 <main>:
 220:	63 df       	rcall	.-314    	; 0xe8 <init_lcd>
 222:	d0 98       	cbi	0x1a, 0	; 26
 224:	81 e0       	ldi	r24, 0x01	; 1
	if(!(PIND&4<<0))
 226:	56 df       	rcall	.-340    	; 0xd4 <cmdbreak>
 228:	8e df       	rcall	.-228    	; 0x146 <keyscan>
	lcdstring("Key - is pressed");
 22a:	fc cf       	rjmp	.-8      	; 0x224 <main+0x4>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
