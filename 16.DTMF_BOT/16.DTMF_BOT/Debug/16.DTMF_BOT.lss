
16.DTMF_BOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000446  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000150  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084b  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011a  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007f  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000fab7  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000113dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	33 c0       	rjmp	.+102    	; 0xf0 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <avr/io.h>
#include <util/delay.h>
void main()
{
	int x;
	DDRB&=~(0x0f);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	80 7f       	andi	r24, 0xF0	; 240
  90:	87 bb       	out	0x17, r24	; 23
	DDRA|=0x0f;
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8f 60       	ori	r24, 0x0F	; 15
  96:	8a bb       	out	0x1a, r24	; 26
			_delay_ms(5000);
				break;
			case 4:
			PORTA=1<<2;	break;
			case 6:
			PORTA=1<<0; break;
  98:	51 e0       	ldi	r21, 0x01	; 1
			case 8:
			PORTA=0x0a; break;
  9a:	4a e0       	ldi	r20, 0x0A	; 10
		x=PINB;
		x=x&(0x0f);
		switch (x)
		{
			case 2:
			PORTA=0x05;
  9c:	35 e0       	ldi	r19, 0x05	; 5
			_delay_ms(5000);
				break;
			case 4:
			PORTA=1<<2;	break;
  9e:	24 e0       	ldi	r18, 0x04	; 4
	DDRB&=~(0x0f);
	DDRA|=0x0f;
	
	while(1)
	{
		x=PINB;
  a0:	86 b3       	in	r24, 0x16	; 22
  a2:	90 e0       	ldi	r25, 0x00	; 0
		x=x&(0x0f);
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	90 70       	andi	r25, 0x00	; 0
		switch (x)
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	91 05       	cpc	r25, r1
  ac:	c9 f0       	breq	.+50     	; 0xe0 <main+0x54>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	91 05       	cpc	r25, r1
  b2:	24 f4       	brge	.+8      	; 0xbc <main+0x30>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	c9 f4       	brne	.+50     	; 0xec <main+0x60>
  ba:	07 c0       	rjmp	.+14     	; 0xca <main+0x3e>
  bc:	86 30       	cpi	r24, 0x06	; 6
  be:	91 05       	cpc	r25, r1
  c0:	89 f0       	breq	.+34     	; 0xe4 <main+0x58>
  c2:	88 30       	cpi	r24, 0x08	; 8
  c4:	91 05       	cpc	r25, r1
  c6:	91 f4       	brne	.+36     	; 0xec <main+0x60>
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <main+0x5c>
		{
			case 2:
			PORTA=0x05;
  ca:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	91 e1       	ldi	r25, 0x11	; 17
  d0:	aa e7       	ldi	r26, 0x7A	; 122
  d2:	81 50       	subi	r24, 0x01	; 1
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x46>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x50>
  dc:	00 00       	nop
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0x14>
			_delay_ms(5000);
				break;
			case 4:
			PORTA=1<<2;	break;
  e0:	2b bb       	out	0x1b, r18	; 27
  e2:	de cf       	rjmp	.-68     	; 0xa0 <main+0x14>
			case 6:
			PORTA=1<<0; break;
  e4:	5b bb       	out	0x1b, r21	; 27
  e6:	dc cf       	rjmp	.-72     	; 0xa0 <main+0x14>
			case 8:
			PORTA=0x0a; break;
  e8:	4b bb       	out	0x1b, r20	; 27
  ea:	da cf       	rjmp	.-76     	; 0xa0 <main+0x14>
			default:
			PORTA=0;
  ec:	1b ba       	out	0x1b, r1	; 27
  ee:	d8 cf       	rjmp	.-80     	; 0xa0 <main+0x14>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
