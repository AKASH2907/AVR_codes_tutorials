
22.VENDING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000d8  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000709  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020a  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000939  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015c  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000facc  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00011bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	78 d0       	rcall	.+240    	; 0x178 <main>
  88:	e3 c0       	rjmp	.+454    	; 0x250 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcdcmd>:
	lcdcmd(0x01);
}

void lcdcmd(char x)
{
	PORTC=x;
  8c:	85 bb       	out	0x15, r24	; 21
	PORTD&=~(1<<rs);  //rs=0 ==>Select Command Register
  8e:	90 98       	cbi	0x12, 0	; 18
	PORTD&=~(1<<rw);  //rw=0 ==>To Write
  90:	91 98       	cbi	0x12, 1	; 18
	PORTD|=(1<<en);   //Enable is high
  92:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcdcmd+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcdcmd+0x12>
  9e:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<en);  //Enable is low
  a0:	92 98       	cbi	0x12, 2	; 18
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x1a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x20>
  ac:	00 00       	nop
	_delay_ms(2);
}
  ae:	08 95       	ret

000000b0 <init_lcd>:
	}
	return 0;
}
void init_lcd()
{
	DDRC=0xff; DDRD=7<<0;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	81 bb       	out	0x11, r24	; 17
	lcdcmd(0x38); lcdcmd(0x0e); lcdcmd(0x06);
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	e8 df       	rcall	.-48     	; 0x8c <lcdcmd>
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	e6 df       	rcall	.-52     	; 0x8c <lcdcmd>
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	e4 df       	rcall	.-56     	; 0x8c <lcdcmd>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	e2 cf       	rjmp	.-60     	; 0x8c <lcdcmd>

000000c8 <lcddata>:
  c8:	85 bb       	out	0x15, r24	; 21
	lcdcmd(0x01);
  ca:	90 9a       	sbi	0x12, 0	; 18
  cc:	91 98       	cbi	0x12, 1	; 18
  ce:	92 9a       	sbi	0x12, 2	; 18
}
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcddata+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcddata+0x12>
  da:	00 00       	nop
	PORTC=x;
	PORTD|=(1<<rs);   //rs=1 ==>Select Data register
	PORTD&=~(1<<rw);  //rw=0 ==>To write
	PORTD|=(1<<en);   //Enable is high
	_delay_ms(1);
	PORTD&=~(1<<en);  //Enable is low
  dc:	92 98       	cbi	0x12, 2	; 18
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcddata+0x1a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcddata+0x20>
  e8:	00 00       	nop
	_delay_ms(2);
	
}
  ea:	08 95       	ret

000000ec <lcdstring>:
void lcdstring(char *p)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while(*p!=0)
  f2:	88 81       	ld	r24, Y
  f4:	88 23       	and	r24, r24
  f6:	71 f0       	breq	.+28     	; 0x114 <lcdstring+0x28>
	_delay_ms(1);
	PORTD&=~(1<<en);  //Enable is low
	_delay_ms(2);
	
}
void lcdstring(char *p)
  f8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!=0)
	{
		lcddata(*p);
  fa:	e6 df       	rcall	.-52     	; 0xc8 <lcddata>
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	90 e7       	ldi	r25, 0x70	; 112
 100:	a2 e0       	ldi	r26, 0x02	; 2
 102:	81 50       	subi	r24, 0x01	; 1
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	a0 40       	sbci	r26, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <lcdstring+0x16>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcdstring+0x20>
 10c:	00 00       	nop
 10e:	89 91       	ld	r24, Y+
	_delay_ms(2);
	
}
void lcdstring(char *p)
{
	while(*p!=0)
 110:	88 23       	and	r24, r24
 112:	99 f7       	brne	.-26     	; 0xfa <lcdstring+0xe>
 114:	df 91       	pop	r29
	{
		lcddata(*p);
		p++;
		_delay_ms(100);
	}
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <motor1>:
 11a:	85 e0       	ldi	r24, 0x05	; 5
	lcdcmd(0x01);
    
}
void motor1()
{
	PORTB=0x05;
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	96 e1       	ldi	r25, 0x16	; 22
 122:	a1 e1       	ldi	r26, 0x11	; 17
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	a0 40       	sbci	r26, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <motor1+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <motor1+0x14>
 12e:	00 00       	nop
	_delay_ms(700);
	PORTB=0x0a;
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	88 bb       	out	0x18, r24	; 24
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	96 e1       	ldi	r25, 0x16	; 22
 138:	a1 e1       	ldi	r26, 0x11	; 17
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <motor1+0x20>
 142:	00 c0       	rjmp	.+0      	; 0x144 <motor1+0x2a>
 144:	00 00       	nop
	_delay_ms(700);
}
 146:	08 95       	ret

00000148 <motor2>:
void motor2()
{
	PORTB=0x50;
 148:	80 e5       	ldi	r24, 0x50	; 80
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	94 e3       	ldi	r25, 0x34	; 52
 150:	ac e0       	ldi	r26, 0x0C	; 12
 152:	81 50       	subi	r24, 0x01	; 1
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	a0 40       	sbci	r26, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <motor2+0xa>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <motor2+0x14>
 15c:	00 00       	nop
	_delay_ms(500);
	PORTB=0;
 15e:	18 ba       	out	0x18, r1	; 24
 160:	08 95       	ret

00000162 <motor>:
		_delay_ms(100);
	}
}
void motor()
{
	motor1();	motor2();
 162:	db df       	rcall	.-74     	; 0x11a <motor1>
 164:	f1 df       	rcall	.-30     	; 0x148 <motor2>
 166:	d9 df       	rcall	.-78     	; 0x11a <motor1>
 168:	ef df       	rcall	.-34     	; 0x148 <motor2>
	motor1();	motor2();
 16a:	d7 df       	rcall	.-82     	; 0x11a <motor1>
 16c:	ed df       	rcall	.-38     	; 0x148 <motor2>
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
	motor1();   motor2();
 172:	bc df       	rcall	.-136    	; 0xec <lcdstring>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	8a cf       	rjmp	.-236    	; 0x8c <lcdcmd>

00000178 <main>:
 178:	9b df       	rcall	.-202    	; 0xb0 <init_lcd>
	lcdstring("ITEM SERVED.");
 17a:	8a b3       	in	r24, 0x1a	; 26
 17c:	80 7e       	andi	r24, 0xE0	; 224
 17e:	8a bb       	out	0x1a, r24	; 26
 180:	8f ef       	ldi	r24, 0xFF	; 255
	lcdcmd(0x01);
 182:	87 bb       	out	0x17, r24	; 23
 184:	0f 2e       	mov	r0, r31
 186:	fd e6       	ldi	r31, 0x6D	; 109
    
}
 188:	ef 2e       	mov	r14, r31
		x=PINA;
		
		
		if((x&(0x10)))
		{
			lcdstring("SELECT OPTIONS");
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ff 2e       	mov	r15, r31
 18e:	f0 2d       	mov	r31, r0
 190:	0f 2e       	mov	r0, r31
			switch (x)
		{
			case 1:
			lcdstring("Serving Coffee"); lcdcmd(0x01);	motor();  break;
			case 2:
			lcdstring("Serving Tea"); lcdcmd(0x01);  motor();  break;
 192:	fb e8       	ldi	r31, 0x8B	; 139
 194:	cf 2e       	mov	r12, r31
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	df 2e       	mov	r13, r31
 19a:	f0 2d       	mov	r31, r0
 19c:	0f 2e       	mov	r0, r31
			case 3:
			lcdstring("Serving Soup"); lcdcmd(0x01);  motor();  break;
 19e:	f7 e9       	ldi	r31, 0x97	; 151
 1a0:	af 2e       	mov	r10, r31
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	bf 2e       	mov	r11, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	0f 2e       	mov	r0, r31
			case 4:
			lcdstring("Serving Dip Tea"); lcdcmd(0x01);  motor();  break;
 1aa:	f4 ea       	ldi	r31, 0xA4	; 164
 1ac:	8f 2e       	mov	r8, r31
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	9f 2e       	mov	r9, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
			_delay_ms(3000);
			x=x&(0x0f);
			switch (x)
		{
			case 1:
			lcdstring("Serving Coffee"); lcdcmd(0x01);	motor();  break;
 1b6:	fc e7       	ldi	r31, 0x7C	; 124
 1b8:	6f 2e       	mov	r6, r31
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	7f 2e       	mov	r7, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	04 eb       	ldi	r16, 0xB4	; 180
			lcdstring("Serving Dip Tea"); lcdcmd(0x01);  motor();  break;
		}
		}
		else if(x&(0x0f))
		{
			lcdstring("NO COIN INSERTD");
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	c9 b3       	in	r28, 0x19	; 25
	init_lcd();
	DDRA&=~(0x1f);
	DDRB=0xff;
	while (1)
	{
		x=PINA;
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	c4 ff       	sbrs	r28, 4
		
		
		if((x&(0x10)))
 1ca:	38 c0       	rjmp	.+112    	; 0x23c <main+0xc4>
 1cc:	c7 01       	movw	r24, r14
		{
			lcdstring("SELECT OPTIONS");
 1ce:	8e df       	rcall	.-228    	; 0xec <lcdstring>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	5c df       	rcall	.-328    	; 0x8c <lcdcmd>
			lcdcmd(0x01);
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9d e3       	ldi	r25, 0x3D	; 61
 1d8:	a9 e4       	ldi	r26, 0x49	; 73
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	a0 40       	sbci	r26, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x62>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x6c>
 1e4:	00 00       	nop
 1e6:	cf 70       	andi	r28, 0x0F	; 15
 1e8:	d0 70       	andi	r29, 0x00	; 0
 1ea:	c2 30       	cpi	r28, 0x02	; 2
			_delay_ms(3000);
			x=x&(0x0f);
 1ec:	d1 05       	cpc	r29, r1
 1ee:	a1 f0       	breq	.+40     	; 0x218 <main+0xa0>
			switch (x)
 1f0:	c3 30       	cpi	r28, 0x03	; 3
 1f2:	d1 05       	cpc	r29, r1
 1f4:	24 f4       	brge	.+8      	; 0x1fe <main+0x86>
 1f6:	c1 30       	cpi	r28, 0x01	; 1
 1f8:	d1 05       	cpc	r29, r1
 1fa:	21 f7       	brne	.-56     	; 0x1c4 <main+0x4c>
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <main+0x94>
 1fe:	c3 30       	cpi	r28, 0x03	; 3
 200:	d1 05       	cpc	r29, r1
 202:	81 f0       	breq	.+32     	; 0x224 <main+0xac>
 204:	c4 30       	cpi	r28, 0x04	; 4
 206:	d1 05       	cpc	r29, r1
 208:	e9 f6       	brne	.-70     	; 0x1c4 <main+0x4c>
 20a:	12 c0       	rjmp	.+36     	; 0x230 <main+0xb8>
 20c:	c3 01       	movw	r24, r6
 20e:	6e df       	rcall	.-292    	; 0xec <lcdstring>
 210:	81 e0       	ldi	r24, 0x01	; 1
		{
			case 1:
			lcdstring("Serving Coffee"); lcdcmd(0x01);	motor();  break;
 212:	3c df       	rcall	.-392    	; 0x8c <lcdcmd>
 214:	a6 df       	rcall	.-180    	; 0x162 <motor>
 216:	d6 cf       	rjmp	.-84     	; 0x1c4 <main+0x4c>
 218:	c6 01       	movw	r24, r12
 21a:	68 df       	rcall	.-304    	; 0xec <lcdstring>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	36 df       	rcall	.-404    	; 0x8c <lcdcmd>
 220:	a0 df       	rcall	.-192    	; 0x162 <motor>
 222:	d0 cf       	rjmp	.-96     	; 0x1c4 <main+0x4c>
			case 2:
			lcdstring("Serving Tea"); lcdcmd(0x01);  motor();  break;
 224:	c5 01       	movw	r24, r10
 226:	62 df       	rcall	.-316    	; 0xec <lcdstring>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	30 df       	rcall	.-416    	; 0x8c <lcdcmd>
 22c:	9a df       	rcall	.-204    	; 0x162 <motor>
 22e:	ca cf       	rjmp	.-108    	; 0x1c4 <main+0x4c>
 230:	c4 01       	movw	r24, r8
 232:	5c df       	rcall	.-328    	; 0xec <lcdstring>
 234:	81 e0       	ldi	r24, 0x01	; 1
			case 3:
			lcdstring("Serving Soup"); lcdcmd(0x01);  motor();  break;
 236:	2a df       	rcall	.-428    	; 0x8c <lcdcmd>
 238:	94 df       	rcall	.-216    	; 0x162 <motor>
 23a:	c4 cf       	rjmp	.-120    	; 0x1c4 <main+0x4c>
 23c:	cf 70       	andi	r28, 0x0F	; 15
 23e:	d0 70       	andi	r29, 0x00	; 0
 240:	20 97       	sbiw	r28, 0x00	; 0
 242:	09 f4       	brne	.+2      	; 0x246 <main+0xce>
 244:	bf cf       	rjmp	.-130    	; 0x1c4 <main+0x4c>
 246:	c8 01       	movw	r24, r16
			case 4:
			lcdstring("Serving Dip Tea"); lcdcmd(0x01);  motor();  break;
 248:	51 df       	rcall	.-350    	; 0xec <lcdstring>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	1f df       	rcall	.-450    	; 0x8c <lcdcmd>
 24e:	ba cf       	rjmp	.-140    	; 0x1c4 <main+0x4c>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
