
13.NTIMES_PRESS_NTH_NUMBERDISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000466  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017a  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000845  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006b  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000fab7  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00011468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	39 c0       	rjmp	.+114    	; 0xfc <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void main()
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	64 97       	sbiw	r28, 0x14	; 20
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	int n=0,arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  a0:	de 01       	movw	r26, r28
  a2:	11 96       	adiw	r26, 0x01	; 1
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	84 e1       	ldi	r24, 0x14	; 20
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x1e>
	DDRA=DDRA&~(1<<0);
  b2:	d0 98       	cbi	0x1a, 0	; 26
	DDRC=0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 bb       	out	0x14, r24	; 20
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void main()
{
	int n=0,arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
				PORTC=arr[n];
			}
			else
			{
				PORTC=arr[0];
				n=0;
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
	int n=0,arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
	DDRA=DDRA&~(1<<0);
	DDRC=0xff;
	while(1)
	{
		if((PINA&(1<<0)))
  c0:	c8 99       	sbic	0x19, 0	; 25
		
			n++;
  c2:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	51 ee       	ldi	r21, 0xE1	; 225
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	41 50       	subi	r20, 0x01	; 1
  cc:	50 40       	sbci	r21, 0x00	; 0
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x3e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x48>
  d4:	00 00       	nop
			_delay_ms(200);
			if(n<=9)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	64 f4       	brge	.+24     	; 0xf4 <main+0x68>
			{
				PORTC=arr[n];
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	6c 0f       	add	r22, r28
  e8:	7d 1f       	adc	r23, r29
  ea:	e6 0f       	add	r30, r22
  ec:	f7 1f       	adc	r31, r23
  ee:	40 81       	ld	r20, Z
  f0:	45 bb       	out	0x15, r20	; 21
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <main+0x34>
			}
			else
			{
				PORTC=arr[0];
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	85 bb       	out	0x15, r24	; 21
				n=0;
  f8:	c9 01       	movw	r24, r18
  fa:	e2 cf       	rjmp	.-60     	; 0xc0 <main+0x34>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
