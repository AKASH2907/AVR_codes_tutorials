
30.RX_USART_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000242  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000655  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000201  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000916  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000162  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0000facc  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00011a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	8d d0       	rcall	.+282    	; 0x1a2 <main>
  88:	90 c0       	rjmp	.+288    	; 0x1aa <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <usart_init>:
	}
	return 0;
}
void usart_init()
{
	UCSRB|=(1<<RXEN);
  8c:	54 9a       	sbi	0x0a, 4	; 10
	UBRRL=0x33;
  8e:	83 e3       	ldi	r24, 0x33	; 51
  90:	89 b9       	out	0x09, r24	; 9
}
  92:	08 95       	ret

00000094 <lcdcmd>:
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);
}

void lcdcmd(char x)
{
	PORTA=x;
  94:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<<rs);  //rs=0 ==>Select Command Register
  96:	d8 98       	cbi	0x1b, 0	; 27
	PORTA&=~(1<<rw);  //rw=0 ==>To Write
  98:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<en);   //Enable is high
  9a:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdcmd+0xc>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcdcmd+0x12>
  a6:	00 00       	nop
	_delay_ms(1);
	PORTA&=~(1<<en);  //Enable is low
  a8:	da 98       	cbi	0x1b, 2	; 27
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcmd+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcdcmd+0x20>
  b4:	00 00       	nop
	_delay_ms(2);
}
  b6:	08 95       	ret

000000b8 <lcddata>:
void lcddata(char x)
{
	PORTA=x;
  b8:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(1<<rs);   //rs=1 ==>Select Data register
  ba:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA&=~(1<<rw);  //rw=0 ==>To write
  bc:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<en);   //Enable is high
  be:	da 9a       	sbi	0x1b, 2	; 27
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	97 e0       	ldi	r25, 0x07	; 7
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcddata+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcddata+0x12>
  ca:	00 00       	nop
	_delay_ms(1);
	PORTA&=~(1<<en);  //Enable is low
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcddata+0x1a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcddata+0x20>
  d8:	00 00       	nop
	_delay_ms(2);
	
}
  da:	08 95       	ret

000000dc <cmdbreak>:
void cmdbreak(char x)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	lcdcmd(x&(0xf0));
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	d8 df       	rcall	.-80     	; 0x94 <lcdcmd>
  e4:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	d4 df       	rcall	.-88     	; 0x94 <lcdcmd>
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <init_lcd>:
}
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	cmdbreak(0x01);
}
void init_lcd()
{
	DDRA=0xff; 
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	f2 df       	rcall	.-28     	; 0xdc <cmdbreak>
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	f0 df       	rcall	.-32     	; 0xdc <cmdbreak>
  fc:	8e e0       	ldi	r24, 0x0E	; 14
  fe:	ee df       	rcall	.-36     	; 0xdc <cmdbreak>
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	ec cf       	rjmp	.-40     	; 0xdc <cmdbreak>

00000104 <databreak>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	d6 df       	rcall	.-84     	; 0xb8 <lcddata>
}
 10c:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
}
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	d2 df       	rcall	.-92     	; 0xb8 <lcddata>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcdstring>:
}
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
void lcdstring(char *x)
{
 11c:	ec 01       	movw	r28, r24
	
	while(*x)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	71 f0       	breq	.+28     	; 0x140 <lcdstring+0x28>
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
}
void lcdstring(char *x)
 124:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*x)
	{
		databreak(*x);
 126:	ee df       	rcall	.-36     	; 0x104 <databreak>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	90 e7       	ldi	r25, 0x70	; 112
 12c:	a2 e0       	ldi	r26, 0x02	; 2
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	a0 40       	sbci	r26, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcdstring+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcdstring+0x20>
 138:	00 00       	nop
 13a:	89 91       	ld	r24, Y+
	lcddata((x<<4)&(0xf0));
}
void lcdstring(char *x)
{
	
	while(*x)
 13c:	88 23       	and	r24, r24
 13e:	99 f7       	brne	.-26     	; 0x126 <lcdstring+0xe>
 140:	df 91       	pop	r29
	{
		databreak(*x);
		x++;
		_delay_ms(100);
	}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <rx>:
 146:	10 92 61 00 	sts	0x0061, r1
	UCSRB|=(1<<RXEN);
	UBRRL=0x33;
}
void rx()
{
	for(i=0;i<13;i++)
 14a:	10 92 60 00 	sts	0x0060, r1
	{
		while((UCSRA&(1<<RXC))==0);
 14e:	5f 9b       	sbis	0x0b, 7	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <rx+0x8>
		lcdstring(UDR);
 152:	8c b1       	in	r24, 0x0c	; 12
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	e0 df       	rcall	.-64     	; 0x118 <lcdstring>
 158:	80 91 60 00 	lds	r24, 0x0060
	UCSRB|=(1<<RXEN);
	UBRRL=0x33;
}
void rx()
{
	for(i=0;i<13;i++)
 15c:	90 91 61 00 	lds	r25, 0x0061
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 61 00 	sts	0x0061, r25
 166:	80 93 60 00 	sts	0x0060, r24
 16a:	8d 30       	cpi	r24, 0x0D	; 13
 16c:	91 05       	cpc	r25, r1
 16e:	7c f3       	brlt	.-34     	; 0x14e <rx+0x8>
 170:	80 ec       	ldi	r24, 0xC0	; 192
	{
		while((UCSRA&(1<<RXC))==0);
		lcdstring(UDR);
	}		
	cmdbreak(0xc0);
 172:	b4 df       	rcall	.-152    	; 0xdc <cmdbreak>
 174:	10 92 61 00 	sts	0x0061, r1
	for(i=0;i<13;i++)
 178:	10 92 60 00 	sts	0x0060, r1
 17c:	5f 9b       	sbis	0x0b, 7	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <rx+0x36>
	{
		while((UCSRA&(1<<RXC))==0);
 180:	8c b1       	in	r24, 0x0c	; 12
 182:	90 e0       	ldi	r25, 0x00	; 0
		lcdstring(UDR);
 184:	c9 df       	rcall	.-110    	; 0x118 <lcdstring>
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	90 91 61 00 	lds	r25, 0x0061
	{
		while((UCSRA&(1<<RXC))==0);
		lcdstring(UDR);
	}		
	cmdbreak(0xc0);
	for(i=0;i<13;i++)
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 61 00 	sts	0x0061, r25
 194:	80 93 60 00 	sts	0x0060, r24
 198:	8d 30       	cpi	r24, 0x0D	; 13
 19a:	91 05       	cpc	r25, r1
 19c:	7c f3       	brlt	.-34     	; 0x17c <rx+0x36>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	9d cf       	rjmp	.-198    	; 0xdc <cmdbreak>

000001a2 <main>:
 1a2:	74 df       	rcall	.-280    	; 0x8c <usart_init>
	{
		while((UCSRA&(1<<RXC))==0);
		lcdstring(UDR);
	}
	
	cmdbreak(0x01);
 1a4:	a5 df       	rcall	.-182    	; 0xf0 <init_lcd>
 1a6:	cf df       	rcall	.-98     	; 0x146 <rx>
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x4>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
