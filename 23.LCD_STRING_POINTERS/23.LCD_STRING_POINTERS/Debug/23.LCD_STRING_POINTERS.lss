
23.LCD_STRING_POINTERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c8  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e8  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001db  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d3  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015a  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000facc  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00011827  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	53 d0       	rcall	.+166    	; 0x12e <main>
  88:	58 c0       	rjmp	.+176    	; 0x13a <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcdcmd>:
	}
	
}
void lcdcmd(char x)
{
	PORTC=x;
  8c:	85 bb       	out	0x15, r24	; 21
	PORTD&=~(1<<rs);  //rs=0 ==>Select Command Register
  8e:	90 98       	cbi	0x12, 0	; 18
	PORTD&=~(1<<rw);  //rw=0 ==>To Write
  90:	91 98       	cbi	0x12, 1	; 18
	PORTD|=(1<<en);   //Enable is high
  92:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcdcmd+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcdcmd+0x12>
  9e:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<en);  //Enable is low
  a0:	92 98       	cbi	0x12, 2	; 18
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x1a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x20>
  ac:	00 00       	nop
	_delay_ms(2);
}
  ae:	08 95       	ret

000000b0 <init_lcd>:
	}
	return 0;
}
void init_lcd()
{
	DDRC=0xff; DDRD=7<<0;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	81 bb       	out	0x11, r24	; 17
	lcdcmd(0x38); lcdcmd(0x0e); lcdcmd(0x06);
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	e8 df       	rcall	.-48     	; 0x8c <lcdcmd>
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	e6 df       	rcall	.-52     	; 0x8c <lcdcmd>
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	e4 df       	rcall	.-56     	; 0x8c <lcdcmd>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	e2 cf       	rjmp	.-60     	; 0x8c <lcdcmd>

000000c8 <lcddata>:
  c8:	85 bb       	out	0x15, r24	; 21
	lcdcmd(0x01);
  ca:	90 9a       	sbi	0x12, 0	; 18
  cc:	91 98       	cbi	0x12, 1	; 18
  ce:	92 9a       	sbi	0x12, 2	; 18
}
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcddata+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcddata+0x12>
  da:	00 00       	nop
	PORTC=x;
	PORTD|=(1<<rs);   //rs=1 ==>Select Data register
	PORTD&=~(1<<rw);  //rw=0 ==>To write
	PORTD|=(1<<en);   //Enable is high
	_delay_ms(1);
	PORTD&=~(1<<en);  //Enable is low
  dc:	92 98       	cbi	0x12, 2	; 18
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcddata+0x1a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcddata+0x20>
  e8:	00 00       	nop
	_delay_ms(2);
	
  ea:	08 95       	ret

000000ec <lcdstring>:
	lcdcmd(0x80); lcdstring("GABBAR SINGH");
	lcdcmd(0xc0); lcdstring("AKASH KUMAR");	
	
}
void lcdstring(char *p)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while(*p!='\0')
  f2:	88 81       	ld	r24, Y
  f4:	88 23       	and	r24, r24
  f6:	71 f0       	breq	.+28     	; 0x114 <lcdstring+0x28>
{
	lcdcmd(0x80); lcdstring("GABBAR SINGH");
	lcdcmd(0xc0); lcdstring("AKASH KUMAR");	
	
}
void lcdstring(char *p)
  f8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!='\0')
	{
		lcddata(*p);
  fa:	e6 df       	rcall	.-52     	; 0xc8 <lcddata>
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	90 e7       	ldi	r25, 0x70	; 112
 100:	a2 e0       	ldi	r26, 0x02	; 2
 102:	81 50       	subi	r24, 0x01	; 1
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	a0 40       	sbci	r26, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <lcdstring+0x16>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcdstring+0x20>
 10c:	00 00       	nop
 10e:	89 91       	ld	r24, Y+
	lcdcmd(0xc0); lcdstring("AKASH KUMAR");	
	
}
void lcdstring(char *p)
{
	while(*p!='\0')
 110:	88 23       	and	r24, r24
 112:	99 f7       	brne	.-26     	; 0xfa <lcdstring+0xe>
 114:	df 91       	pop	r29
		lcddata(*p);
		p++;
		_delay_ms(100);
	}
	
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <display>:
 11a:	80 e8       	ldi	r24, 0x80	; 128
	lcdcmd(0x38); lcdcmd(0x0e); lcdcmd(0x06);
	lcdcmd(0x01);
}
void display()
{
	lcdcmd(0x80); lcdstring("GABBAR SINGH");
 11c:	b7 df       	rcall	.-146    	; 0x8c <lcdcmd>
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	e4 df       	rcall	.-56     	; 0xec <lcdstring>
 124:	80 ec       	ldi	r24, 0xC0	; 192
 126:	b2 df       	rcall	.-156    	; 0x8c <lcdcmd>
	lcdcmd(0xc0); lcdstring("AKASH KUMAR");	
 128:	8d e6       	ldi	r24, 0x6D	; 109
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	df cf       	rjmp	.-66     	; 0xec <lcdstring>

0000012e <main>:
 12e:	c0 df       	rcall	.-128    	; 0xb0 <init_lcd>
 130:	d0 98       	cbi	0x1a, 0	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	ab df       	rcall	.-170    	; 0x8c <lcdcmd>
	
}
 136:	f1 df       	rcall	.-30     	; 0x11a <display>
	
	init_lcd();
	DDRA&=~(1<<0);
	while (1)
	{	
		lcdcmd(0x01);	
 138:	fc cf       	rjmp	.-8      	; 0x132 <main+0x4>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
