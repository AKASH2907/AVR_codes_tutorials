
32.RFID_ACCESS_SYSTEM_ID_PASS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000bc  008000bc  00000682  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2e  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022b  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a91  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054d  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000100c0  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000130d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	60 d2       	rcall	.+1216   	; 0x548 <main>
  88:	82 c2       	rjmp	.+1284   	; 0x58e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <usart_init>:
	
	return 0;
}
void usart_init()
{
	UCSRB|=(1<<RXEN); UBRRL=0x33;
  8c:	54 9a       	sbi	0x0a, 4	; 10
  8e:	83 e3       	ldi	r24, 0x33	; 51
  90:	89 b9       	out	0x09, r24	; 9
}
  92:	08 95       	ret

00000094 <lcdcmd>:
		_delay_ms(100);
	}
}
void lcdcmd(char x)
{
	PORTA=x;
  94:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<<rs);  //rs=0 ==>Select Command Register
  96:	d8 98       	cbi	0x1b, 0	; 27
	PORTA&=~(1<<rw);  //rw=0 ==>To Write
  98:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<en);   //Enable is high
  9a:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdcmd+0xc>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcdcmd+0x12>
  a6:	00 00       	nop
	_delay_ms(1);
	PORTA&=~(1<<en);  //Enable is low
  a8:	da 98       	cbi	0x1b, 2	; 27
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcmd+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcdcmd+0x20>
  b4:	00 00       	nop
	_delay_ms(2);
}
  b6:	08 95       	ret

000000b8 <lcddata>:
void lcddata(char x)
{
	PORTA=x;
  b8:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(1<<rs);   //rs=1 ==>Select Data register
  ba:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA&=~(1<<rw);  //rw=0 ==>To write
  bc:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<en);   //Enable is high
  be:	da 9a       	sbi	0x1b, 2	; 27
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	97 e0       	ldi	r25, 0x07	; 7
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcddata+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcddata+0x12>
  ca:	00 00       	nop
	_delay_ms(1);
	PORTA&=~(1<<en);  //Enable is low
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcddata+0x1a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcddata+0x20>
  d8:	00 00       	nop
	_delay_ms(2);
	
}
  da:	08 95       	ret

000000dc <motor>:
void motor()
{
	DDRB|=0x0f;
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	87 bb       	out	0x17, r24	; 23
	PORTB|=0x05;
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	85 60       	ori	r24, 0x05	; 5
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	96 e1       	ldi	r25, 0x16	; 22
  ec:	a1 e1       	ldi	r26, 0x11	; 17
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	a0 40       	sbci	r26, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <motor+0x12>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <motor+0x1c>
  f8:	00 00       	nop
	_delay_ms(700);
	PORTB|=0x0a;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	8a 60       	ori	r24, 0x0A	; 10
  fe:	88 bb       	out	0x18, r24	; 24
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	96 e1       	ldi	r25, 0x16	; 22
 104:	a1 e1       	ldi	r26, 0x11	; 17
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <motor+0x2a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <motor+0x34>
 110:	00 00       	nop
	_delay_ms(700);
	
}
 112:	08 95       	ret

00000114 <cmdbreak>:
void cmdbreak(char x)
{
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	lcdcmd(x&(0xf0));
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	bc df       	rcall	.-136    	; 0x94 <lcdcmd>
 11c:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
 11e:	82 95       	swap	r24
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	b8 df       	rcall	.-144    	; 0x94 <lcdcmd>
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <init_lcd>:
}
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
	UCSRB|=(1<<RXEN); UBRRL=0x33;
}
void init_lcd()
{
	DDRA=0xff; 
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	f2 df       	rcall	.-28     	; 0x114 <cmdbreak>
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	f0 df       	rcall	.-32     	; 0x114 <cmdbreak>
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	ee df       	rcall	.-36     	; 0x114 <cmdbreak>
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	ec df       	rcall	.-40     	; 0x114 <cmdbreak>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	ea cf       	rjmp	.-44     	; 0x114 <cmdbreak>

00000140 <databreak>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	b8 df       	rcall	.-144    	; 0xb8 <lcddata>
 148:	8c 2f       	mov	r24, r28
}
 14a:	82 95       	swap	r24
	lcdcmd((x<<4)&(0xf0));
}
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcddata>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcdstring>:
}
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	}
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
 158:	ec 01       	movw	r28, r24
	while(*p!=0)
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	71 f0       	breq	.+28     	; 0x17c <lcdstring+0x28>
	{	}
	}
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
 160:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!=0)
	{
		databreak(*p);
 162:	ee df       	rcall	.-36     	; 0x140 <databreak>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	90 e7       	ldi	r25, 0x70	; 112
 168:	a2 e0       	ldi	r26, 0x02	; 2
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	a0 40       	sbci	r26, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <lcdstring+0x16>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcdstring+0x20>
 174:	00 00       	nop
 176:	89 91       	ld	r24, Y+
	e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
	while(*p!=0)
 178:	88 23       	and	r24, r24
 17a:	99 f7       	brne	.-26     	; 0x162 <lcdstring+0xe>
 17c:	df 91       	pop	r29
	{
		databreak(*p);
		p++;
		_delay_ms(100);
	}
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <keyscan>:
 182:	5f 92       	push	r5
{
	DDRA=0xff; 
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
 184:	6f 92       	push	r6
 186:	7f 92       	push	r7
 188:	8f 92       	push	r8
 18a:	9f 92       	push	r9
 18c:	af 92       	push	r10
 18e:	bf 92       	push	r11
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	
	while(i<5)
	{PORTC=0x0f;
 1a0:	cf e0       	ldi	r28, 0x0F	; 15
		DDRC=0xf0;
 1a2:	d0 ef       	ldi	r29, 0xF0	; 240
			i++;
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
		{
			lcdstring("*");
 1a4:	0f 2e       	mov	r0, r31
 1a6:	f0 e6       	ldi	r31, 0x60	; 96
 1a8:	ef 2e       	mov	r14, r31
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ff 2e       	mov	r15, r31
 1ae:	f0 2d       	mov	r31, r0
			e_pass[i]='1';
 1b0:	0e eb       	ldi	r16, 0xBE	; 190
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f1 e3       	ldi	r31, 0x31	; 49
 1b8:	8f 2e       	mov	r8, r31
 1ba:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
		{
			lcdstring("*");
			e_pass[i]='4';
 1bc:	0f 2e       	mov	r0, r31
 1be:	f4 e3       	ldi	r31, 0x34	; 52
 1c0:	bf 2e       	mov	r11, r31
 1c2:	f0 2d       	mov	r31, r0
		DDRC=0xf0;
		PORTC|=(1<<5)|(1<<6)|(1<<7);
		if(!(PINC&1<<0))
		{
			lcdstring("*");
			e_pass[i]='7';
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f7 e3       	ldi	r31, 0x37	; 55
 1c8:	df 2e       	mov	r13, r31
 1ca:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&8<<0))
		{
			lcdstring("*");
			e_pass[i]='0';
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f0 e3       	ldi	r31, 0x30	; 48
 1d0:	5f 2e       	mov	r5, r31
 1d2:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
		{
			lcdstring("*");
			e_pass[i]='2';
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f2 e3       	ldi	r31, 0x32	; 50
 1d8:	7f 2e       	mov	r7, r31
 1da:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
		{
			lcdstring("*");
			e_pass[i]='5';
 1dc:	0f 2e       	mov	r0, r31
 1de:	f5 e3       	ldi	r31, 0x35	; 53
 1e0:	af 2e       	mov	r10, r31
 1e2:	f0 2d       	mov	r31, r0
		DDRC=0xf0;
		PORTC=PORTC|(1<<4)|(1<<6)|(1<<7);
		if(!(PINC&1<<0))
		{
			lcdstring("*");
			e_pass[i]='8';
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f8 e3       	ldi	r31, 0x38	; 56
 1e8:	cf 2e       	mov	r12, r31
 1ea:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
		{
			lcdstring("*");
			e_pass[i]='3';
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f3 e3       	ldi	r31, 0x33	; 51
 1f0:	6f 2e       	mov	r6, r31
 1f2:	f0 2d       	mov	r31, r0
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
		{
			lcdstring("*");
			e_pass[i]='6';
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f6 e3       	ldi	r31, 0x36	; 54
 1f8:	9f 2e       	mov	r9, r31
 1fa:	f0 2d       	mov	r31, r0
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	
	while(i<5)
 1fc:	1f c1       	rjmp	.+574    	; 0x43c <keyscan+0x2ba>
	{PORTC=0x0f;
 1fe:	c5 bb       	out	0x15, r28	; 21
		DDRC=0xf0;
 200:	d4 bb       	out	0x14, r29	; 20
		PORTC|=(1<<5)|(1<<6)|(1<<7);
 202:	85 b3       	in	r24, 0x15	; 21
 204:	80 6e       	ori	r24, 0xE0	; 224
 206:	85 bb       	out	0x15, r24	; 21
		if(!(PINC&1<<0))
 208:	98 99       	sbic	0x13, 0	; 19
 20a:	19 c0       	rjmp	.+50     	; 0x23e <keyscan+0xbc>
		{
			lcdstring("*");
 20c:	c7 01       	movw	r24, r14
 20e:	a2 df       	rcall	.-188    	; 0x154 <lcdstring>
 210:	80 91 bc 00 	lds	r24, 0x00BC
			e_pass[i]='7';
 214:	90 91 bd 00 	lds	r25, 0x00BD
 218:	f8 01       	movw	r30, r16
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	d0 82       	st	Z, r13
 220:	01 96       	adiw	r24, 0x01	; 1
			i++;
 222:	90 93 bd 00 	sts	0x00BD, r25
 226:	80 93 bc 00 	sts	0x00BC, r24
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	90 e7       	ldi	r25, 0x70	; 112
 22e:	a2 e0       	ldi	r26, 0x02	; 2
 230:	81 50       	subi	r24, 0x01	; 1
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	a0 40       	sbci	r26, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <keyscan+0xae>
 238:	00 c0       	rjmp	.+0      	; 0x23a <keyscan+0xb8>
 23a:	00 00       	nop
 23c:	37 c0       	rjmp	.+110    	; 0x2ac <keyscan+0x12a>
 23e:	99 99       	sbic	0x13, 1	; 19
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
 240:	19 c0       	rjmp	.+50     	; 0x274 <keyscan+0xf2>
 242:	c7 01       	movw	r24, r14
		{
			lcdstring("*");
 244:	87 df       	rcall	.-242    	; 0x154 <lcdstring>
 246:	80 91 bc 00 	lds	r24, 0x00BC
			e_pass[i]='4';
 24a:	90 91 bd 00 	lds	r25, 0x00BD
 24e:	f8 01       	movw	r30, r16
 250:	e8 0f       	add	r30, r24
 252:	f9 1f       	adc	r31, r25
 254:	b0 82       	st	Z, r11
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 bd 00 	sts	0x00BD, r25
			i++;
 25c:	80 93 bc 00 	sts	0x00BC, r24
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	90 e7       	ldi	r25, 0x70	; 112
 264:	a2 e0       	ldi	r26, 0x02	; 2
 266:	81 50       	subi	r24, 0x01	; 1
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	a0 40       	sbci	r26, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <keyscan+0xe4>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <keyscan+0xee>
 270:	00 00       	nop
 272:	1c c0       	rjmp	.+56     	; 0x2ac <keyscan+0x12a>
 274:	9a 99       	sbic	0x13, 2	; 19
 276:	19 c0       	rjmp	.+50     	; 0x2aa <keyscan+0x128>
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
 278:	c7 01       	movw	r24, r14
 27a:	6c df       	rcall	.-296    	; 0x154 <lcdstring>
		{
			lcdstring("*");
 27c:	80 91 bc 00 	lds	r24, 0x00BC
 280:	90 91 bd 00 	lds	r25, 0x00BD
			e_pass[i]='1';
 284:	f8 01       	movw	r30, r16
 286:	e8 0f       	add	r30, r24
 288:	f9 1f       	adc	r31, r25
 28a:	80 82       	st	Z, r8
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 bd 00 	sts	0x00BD, r25
			i++;
 292:	80 93 bc 00 	sts	0x00BC, r24
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	90 e7       	ldi	r25, 0x70	; 112
 29a:	a2 e0       	ldi	r26, 0x02	; 2
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	a0 40       	sbci	r26, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <keyscan+0x11a>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <keyscan+0x124>
 2a6:	00 00       	nop
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <keyscan+0x12a>
 2aa:	83 b3       	in	r24, 0x13	; 19
 2ac:	c5 bb       	out	0x15, r28	; 21
 2ae:	d4 bb       	out	0x14, r29	; 20
			_delay_ms(100);
		}
		else if(!(PINC&8<<0))
 2b0:	85 b3       	in	r24, 0x15	; 21
	{	}
		PORTC=0x0f;
 2b2:	80 6d       	ori	r24, 0xD0	; 208
		DDRC=0xf0;
 2b4:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|(1<<4)|(1<<6)|(1<<7);
 2b6:	98 99       	sbic	0x13, 0	; 19
 2b8:	19 c0       	rjmp	.+50     	; 0x2ec <keyscan+0x16a>
 2ba:	c7 01       	movw	r24, r14
		if(!(PINC&1<<0))
 2bc:	4b df       	rcall	.-362    	; 0x154 <lcdstring>
 2be:	80 91 bc 00 	lds	r24, 0x00BC
		{
			lcdstring("*");
 2c2:	90 91 bd 00 	lds	r25, 0x00BD
			e_pass[i]='8';
 2c6:	f8 01       	movw	r30, r16
 2c8:	e8 0f       	add	r30, r24
 2ca:	f9 1f       	adc	r31, r25
 2cc:	c0 82       	st	Z, r12
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 bd 00 	sts	0x00BD, r25
 2d4:	80 93 bc 00 	sts	0x00BC, r24
			i++;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	90 e7       	ldi	r25, 0x70	; 112
 2dc:	a2 e0       	ldi	r26, 0x02	; 2
 2de:	81 50       	subi	r24, 0x01	; 1
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	a0 40       	sbci	r26, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <keyscan+0x15c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <keyscan+0x166>
 2e8:	00 00       	nop
 2ea:	50 c0       	rjmp	.+160    	; 0x38c <keyscan+0x20a>
 2ec:	99 99       	sbic	0x13, 1	; 19
 2ee:	19 c0       	rjmp	.+50     	; 0x322 <keyscan+0x1a0>
 2f0:	c7 01       	movw	r24, r14
 2f2:	30 df       	rcall	.-416    	; 0x154 <lcdstring>
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
 2f4:	80 91 bc 00 	lds	r24, 0x00BC
		{
			lcdstring("*");
 2f8:	90 91 bd 00 	lds	r25, 0x00BD
 2fc:	f8 01       	movw	r30, r16
			e_pass[i]='5';
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	a0 82       	st	Z, r10
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 bd 00 	sts	0x00BD, r25
 30a:	80 93 bc 00 	sts	0x00BC, r24
			i++;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	90 e7       	ldi	r25, 0x70	; 112
 312:	a2 e0       	ldi	r26, 0x02	; 2
 314:	81 50       	subi	r24, 0x01	; 1
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	a0 40       	sbci	r26, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <keyscan+0x192>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <keyscan+0x19c>
 31e:	00 00       	nop
 320:	35 c0       	rjmp	.+106    	; 0x38c <keyscan+0x20a>
 322:	9a 99       	sbic	0x13, 2	; 19
 324:	19 c0       	rjmp	.+50     	; 0x358 <keyscan+0x1d6>
 326:	c7 01       	movw	r24, r14
 328:	15 df       	rcall	.-470    	; 0x154 <lcdstring>
 32a:	80 91 bc 00 	lds	r24, 0x00BC
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
 32e:	90 91 bd 00 	lds	r25, 0x00BD
		{
			lcdstring("*");
 332:	f8 01       	movw	r30, r16
 334:	e8 0f       	add	r30, r24
			e_pass[i]='2';
 336:	f9 1f       	adc	r31, r25
 338:	70 82       	st	Z, r7
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 bd 00 	sts	0x00BD, r25
 340:	80 93 bc 00 	sts	0x00BC, r24
 344:	8f ef       	ldi	r24, 0xFF	; 255
			i++;
 346:	90 e7       	ldi	r25, 0x70	; 112
 348:	a2 e0       	ldi	r26, 0x02	; 2
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	a0 40       	sbci	r26, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <keyscan+0x1c8>
 352:	00 c0       	rjmp	.+0      	; 0x354 <keyscan+0x1d2>
 354:	00 00       	nop
 356:	1a c0       	rjmp	.+52     	; 0x38c <keyscan+0x20a>
 358:	9b 99       	sbic	0x13, 3	; 19
 35a:	18 c0       	rjmp	.+48     	; 0x38c <keyscan+0x20a>
 35c:	c7 01       	movw	r24, r14
 35e:	fa de       	rcall	.-524    	; 0x154 <lcdstring>
 360:	80 91 bc 00 	lds	r24, 0x00BC
			_delay_ms(100);
		}
		else if(!(PINC&8<<0))
 364:	90 91 bd 00 	lds	r25, 0x00BD
		{
			lcdstring("*");
 368:	f8 01       	movw	r30, r16
 36a:	e8 0f       	add	r30, r24
 36c:	f9 1f       	adc	r31, r25
			e_pass[i]='0';
 36e:	50 82       	st	Z, r5
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 bd 00 	sts	0x00BD, r25
 376:	80 93 bc 00 	sts	0x00BC, r24
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	90 e7       	ldi	r25, 0x70	; 112
			i++;
 37e:	a2 e0       	ldi	r26, 0x02	; 2
 380:	81 50       	subi	r24, 0x01	; 1
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	a0 40       	sbci	r26, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <keyscan+0x1fe>
 388:	00 c0       	rjmp	.+0      	; 0x38a <keyscan+0x208>
 38a:	00 00       	nop
 38c:	c5 bb       	out	0x15, r28	; 21
 38e:	d4 bb       	out	0x14, r29	; 20
 390:	85 b3       	in	r24, 0x15	; 21
 392:	80 6b       	ori	r24, 0xB0	; 176
 394:	85 bb       	out	0x15, r24	; 21
 396:	98 99       	sbic	0x13, 0	; 19
 398:	1a c0       	rjmp	.+52     	; 0x3ce <keyscan+0x24c>
			_delay_ms(100);
		}
		PORTC=0x0f;
 39a:	c7 01       	movw	r24, r14
		DDRC=0xf0;
 39c:	db de       	rcall	.-586    	; 0x154 <lcdstring>
		PORTC=PORTC|(1<<4)|(1<<5)|(1<<7);
 39e:	80 91 bc 00 	lds	r24, 0x00BC
 3a2:	90 91 bd 00 	lds	r25, 0x00BD
		if(!(PINC&1<<0))
 3a6:	f8 01       	movw	r30, r16
		{
			lcdstring("*");
 3a8:	e8 0f       	add	r30, r24
 3aa:	f9 1f       	adc	r31, r25
 3ac:	29 e3       	ldi	r18, 0x39	; 57
			e_pass[i]='9';
 3ae:	20 83       	st	Z, r18
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	90 93 bd 00 	sts	0x00BD, r25
 3b6:	80 93 bc 00 	sts	0x00BC, r24
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	90 e7       	ldi	r25, 0x70	; 112
 3be:	a2 e0       	ldi	r26, 0x02	; 2
			i++;
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	a0 40       	sbci	r26, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <keyscan+0x23e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <keyscan+0x248>
 3ca:	00 00       	nop
 3cc:	37 c0       	rjmp	.+110    	; 0x43c <keyscan+0x2ba>
 3ce:	99 99       	sbic	0x13, 1	; 19
 3d0:	19 c0       	rjmp	.+50     	; 0x404 <keyscan+0x282>
 3d2:	c7 01       	movw	r24, r14
 3d4:	bf de       	rcall	.-642    	; 0x154 <lcdstring>
 3d6:	80 91 bc 00 	lds	r24, 0x00BC
 3da:	90 91 bd 00 	lds	r25, 0x00BD
			_delay_ms(100);
		}
		else if(!(PINC&2<<0))
 3de:	f8 01       	movw	r30, r16
 3e0:	e8 0f       	add	r30, r24
		{
			lcdstring("*");
 3e2:	f9 1f       	adc	r31, r25
 3e4:	90 82       	st	Z, r9
 3e6:	01 96       	adiw	r24, 0x01	; 1
			e_pass[i]='6';
 3e8:	90 93 bd 00 	sts	0x00BD, r25
 3ec:	80 93 bc 00 	sts	0x00BC, r24
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	90 e7       	ldi	r25, 0x70	; 112
 3f4:	a2 e0       	ldi	r26, 0x02	; 2
 3f6:	81 50       	subi	r24, 0x01	; 1
			i++;
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	a0 40       	sbci	r26, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <keyscan+0x274>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <keyscan+0x27e>
 400:	00 00       	nop
 402:	1c c0       	rjmp	.+56     	; 0x43c <keyscan+0x2ba>
 404:	9a 99       	sbic	0x13, 2	; 19
 406:	19 c0       	rjmp	.+50     	; 0x43a <keyscan+0x2b8>
 408:	c7 01       	movw	r24, r14
 40a:	a4 de       	rcall	.-696    	; 0x154 <lcdstring>
 40c:	80 91 bc 00 	lds	r24, 0x00BC
 410:	90 91 bd 00 	lds	r25, 0x00BD
 414:	f8 01       	movw	r30, r16
			_delay_ms(100);
		}
		else if(!(PINC&4<<0))
 416:	e8 0f       	add	r30, r24
 418:	f9 1f       	adc	r31, r25
		{
			lcdstring("*");
 41a:	60 82       	st	Z, r6
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 bd 00 	sts	0x00BD, r25
			e_pass[i]='3';
 422:	80 93 bc 00 	sts	0x00BC, r24
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	90 e7       	ldi	r25, 0x70	; 112
 42a:	a2 e0       	ldi	r26, 0x02	; 2
 42c:	81 50       	subi	r24, 0x01	; 1
 42e:	90 40       	sbci	r25, 0x00	; 0
			i++;
 430:	a0 40       	sbci	r26, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <keyscan+0x2aa>
 434:	00 c0       	rjmp	.+0      	; 0x436 <keyscan+0x2b4>
 436:	00 00       	nop
 438:	01 c0       	rjmp	.+2      	; 0x43c <keyscan+0x2ba>
 43a:	83 b3       	in	r24, 0x13	; 19
 43c:	80 91 bc 00 	lds	r24, 0x00BC
 440:	90 91 bd 00 	lds	r25, 0x00BD
 444:	85 30       	cpi	r24, 0x05	; 5
 446:	91 05       	cpc	r25, r1
 448:	0c f4       	brge	.+2      	; 0x44c <keyscan+0x2ca>
 44a:	d9 ce       	rjmp	.-590    	; 0x1fe <keyscan+0x7c>
 44c:	82 54       	subi	r24, 0x42	; 66
			_delay_ms(100);
		}
		else if(!(PINC&8<<0))
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	
	while(i<5)
 450:	dc 01       	movw	r26, r24
 452:	1c 92       	st	X, r1
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
			_delay_ms(100);
		}
		else if(!(PINC&8<<0))
	{	}
	}
	e_pass[i]='\0';
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	bf 90       	pop	r11
 466:	af 90       	pop	r10
	
}
 468:	9f 90       	pop	r9
 46a:	8f 90       	pop	r8
 46c:	7f 90       	pop	r7
 46e:	6f 90       	pop	r6
 470:	5f 90       	pop	r5
 472:	08 95       	ret

00000474 <id_check>:
 474:	84 ec       	ldi	r24, 0xC4	; 196
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	61 eb       	ldi	r22, 0xB1	; 177
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	7f d0       	rcall	.+254    	; 0x57c <strcmp>
 47e:	28 2f       	mov	r18, r24
 480:	39 2f       	mov	r19, r25
 482:	21 15       	cp	r18, r1
 484:	31 05       	cpc	r19, r1
 486:	59 f4       	brne	.+22     	; 0x49e <id_check+0x2a>
		cmdbreak(0x01);
	}
}
void id_check()
{
	if(strcmp(a,id)==0)
 488:	82 e6       	ldi	r24, 0x62	; 98
	{
		lcdstring("HOME SWEET");
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	63 de       	rcall	.-826    	; 0x154 <lcdstring>
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	41 de       	rcall	.-894    	; 0x114 <cmdbreak>
		cmdbreak(0xc0);
 492:	8d e6       	ldi	r24, 0x6D	; 109
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	5e de       	rcall	.-836    	; 0x154 <lcdstring>
		lcdstring("HOME");
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	3c de       	rcall	.-904    	; 0x114 <cmdbreak>
 49c:	1f ce       	rjmp	.-962    	; 0xdc <motor>
 49e:	08 95       	ret

000004a0 <card>:
	    cmdbreak(0x01);
 4a0:	10 92 bd 00 	sts	0x00BD, r1
 4a4:	10 92 bc 00 	sts	0x00BC, r1
		motor();
 4a8:	e4 ec       	ldi	r30, 0xC4	; 196
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
}
void card()
{
	for(i=0;i<4;i++)
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		while((UCSRA&(1<<RXC))==0);
 4b0:	5f 9b       	sbis	0x0b, 7	; 11
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <card+0x10>
		a[i]=UDR;
 4b4:	2c b1       	in	r18, 0x0c	; 12
 4b6:	21 93       	st	Z+, r18
	}
	
}
void card()
{
	for(i=0;i<4;i++)
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 bd 00 	sts	0x00BD, r25
 4be:	80 93 bc 00 	sts	0x00BC, r24
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	91 05       	cpc	r25, r1
 4c6:	a1 f7       	brne	.-24     	; 0x4b0 <card+0x10>
	{
		while((UCSRA&(1<<RXC))==0);
		a[i]=UDR;
	}
	id_check();
 4c8:	d5 cf       	rjmp	.-86     	; 0x474 <id_check>

000004ca <p_check>:
 4ca:	8e eb       	ldi	r24, 0xBE	; 190
 4cc:	90 e0       	ldi	r25, 0x00	; 0
	lcddata((x<<4)&(0xf0));
}
void p_check()
{
	
	if(strcmp(e_pass,s_pass)==0)
 4ce:	66 eb       	ldi	r22, 0xB6	; 182
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	54 d0       	rcall	.+168    	; 0x57c <strcmp>
 4d4:	28 2f       	mov	r18, r24
 4d6:	39 2f       	mov	r19, r25
 4d8:	21 15       	cp	r18, r1
 4da:	31 05       	cpc	r19, r1
 4dc:	a1 f4       	brne	.+40     	; 0x506 <p_check+0x3c>
 4de:	82 e7       	ldi	r24, 0x72	; 114
	{
		lcdstring("SHOW YOUR");
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	38 de       	rcall	.-912    	; 0x154 <lcdstring>
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	16 de       	rcall	.-980    	; 0x114 <cmdbreak>
		cmdbreak(0xc0);
 4e8:	8c e7       	ldi	r24, 0x7C	; 124
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	33 de       	rcall	.-922    	; 0x154 <lcdstring>
		lcdstring("ID CARD");
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	90 e7       	ldi	r25, 0x70	; 112
 4f2:	a2 e0       	ldi	r26, 0x02	; 2
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	a0 40       	sbci	r26, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <p_check+0x2a>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <p_check+0x34>
 4fe:	00 00       	nop
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 de       	rcall	.-1008   	; 0x114 <cmdbreak>
 504:	cd cf       	rjmp	.-102    	; 0x4a0 <card>
 506:	84 e8       	ldi	r24, 0x84	; 132
		_delay_ms(100);
		cmdbreak(0x01);
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	24 de       	rcall	.-952    	; 0x154 <lcdstring>
 50c:	80 ec       	ldi	r24, 0xC0	; 192
		card();
 50e:	02 de       	rcall	.-1020   	; 0x114 <cmdbreak>
 510:	8e e8       	ldi	r24, 0x8E	; 142
 512:	90 e0       	ldi	r25, 0x00	; 0
		
	}
	else
	{
		lcdstring("INCORRECT");
 514:	1f de       	rcall	.-962    	; 0x154 <lcdstring>
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	91 ee       	ldi	r25, 0xE1	; 225
 51a:	a4 e0       	ldi	r26, 0x04	; 4
		cmdbreak(0xc0);
 51c:	81 50       	subi	r24, 0x01	; 1
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	a0 40       	sbci	r26, 0x00	; 0
		lcdstring("PASSWORD");
 522:	e1 f7       	brne	.-8      	; 0x51c <p_check+0x52>
 524:	00 c0       	rjmp	.+0      	; 0x526 <p_check+0x5c>
 526:	00 00       	nop
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	f4 dd       	rcall	.-1048   	; 0x114 <cmdbreak>
 52c:	87 e9       	ldi	r24, 0x97	; 151
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	11 de       	rcall	.-990    	; 0x154 <lcdstring>
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	90 e7       	ldi	r25, 0x70	; 112
 536:	a2 e0       	ldi	r26, 0x02	; 2
 538:	81 50       	subi	r24, 0x01	; 1
 53a:	90 40       	sbci	r25, 0x00	; 0
		_delay_ms(200);
		cmdbreak(0x01);
 53c:	a0 40       	sbci	r26, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <p_check+0x6e>
 540:	00 c0       	rjmp	.+0      	; 0x542 <p_check+0x78>
		lcdstring("TYPE AGAIN");
 542:	00 00       	nop
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	e6 cd       	rjmp	.-1076   	; 0x114 <cmdbreak>

00000548 <main>:
 548:	a1 dd       	rcall	.-1214   	; 0x8c <usart_init>
 54a:	ee dd       	rcall	.-1060   	; 0x128 <init_lcd>
 54c:	c2 ea       	ldi	r28, 0xA2	; 162
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	ce 01       	movw	r24, r28
 552:	00 de       	rcall	.-1024   	; 0x154 <lcdstring>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	91 ee       	ldi	r25, 0xE1	; 225
 558:	a4 e0       	ldi	r26, 0x04	; 4
 55a:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(100);
		cmdbreak(0x01);
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	a0 40       	sbci	r26, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x12>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x1c>
 564:	00 00       	nop
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	d5 dd       	rcall	.-1110   	; 0x114 <cmdbreak>
 56a:	0b de       	rcall	.-1002   	; 0x182 <keyscan>
	init_lcd();
	while (1)
	{
		lcdstring("ENTER PASSWORD");
		_delay_ms(200);
		cmdbreak(0x01);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	d2 dd       	rcall	.-1116   	; 0x114 <cmdbreak>
 570:	ac df       	rcall	.-168    	; 0x4ca <p_check>
		keyscan();
 572:	10 92 bd 00 	sts	0x00BD, r1
		cmdbreak(0x01);
 576:	10 92 bc 00 	sts	0x00BC, r1
 57a:	ea cf       	rjmp	.-44     	; 0x550 <main+0x8>

0000057c <strcmp>:
		p_check();
 57c:	fb 01       	movw	r30, r22
 57e:	dc 01       	movw	r26, r24
		i=0;
 580:	8d 91       	ld	r24, X+
 582:	01 90       	ld	r0, Z+
 584:	80 19       	sub	r24, r0
 586:	01 10       	cpse	r0, r1
 588:	d9 f3       	breq	.-10     	; 0x580 <strcmp+0x4>
 58a:	99 0b       	sbc	r25, r25
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
