
26.LCD_KEYPAD_PASSWORD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000004de  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800090  00800090  000005a2  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d0  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000229  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a16  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000181  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054d  00000000  00000000  00002781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000100c0  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00012d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	16 d2       	rcall	.+1068   	; 0x4b4 <main>
  88:	28 c2       	rjmp	.+1104   	; 0x4da <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <lcdcmd>:
		_delay_ms(100);
	}
}
void lcdcmd(char x)
{
	PORTC=x;
  8c:	85 bb       	out	0x15, r24	; 21
	PORTC&=~(1<<rs);  //rs=0 ==>Select Command Register
  8e:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To Write
  90:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  92:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcdcmd+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcdcmd+0x12>
  9e:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  a0:	aa 98       	cbi	0x15, 2	; 21
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x1a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x20>
  ac:	00 00       	nop
	_delay_ms(2);
}
  ae:	08 95       	ret

000000b0 <lcddata>:
void lcddata(char x)
{
	PORTC=x;
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<rs);   //rs=1 ==>Select Data register
  b2:	a8 9a       	sbi	0x15, 0	; 21
	PORTC&=~(1<<rw);  //rw=0 ==>To write
  b4:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);   //Enable is high
  b6:	aa 9a       	sbi	0x15, 2	; 21
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcddata+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcddata+0x12>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTC&=~(1<<en);  //Enable is low
  c4:	aa 98       	cbi	0x15, 2	; 21
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcddata+0x1a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcddata+0x20>
  d0:	00 00       	nop
	_delay_ms(2);
	
}
  d2:	08 95       	ret

000000d4 <cmdbreak>:
void cmdbreak(char x)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	lcdcmd(x&(0xf0));
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	d8 df       	rcall	.-80     	; 0x8c <lcdcmd>
  dc:	8c 2f       	mov	r24, r28
	lcdcmd((x<<4)&(0xf0));
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	d4 df       	rcall	.-88     	; 0x8c <lcdcmd>
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <init_lcd>:
}
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	
	return 0;
}
void init_lcd()
{
	DDRC=0xff; DDRD=7<<0;
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	81 bb       	out	0x11, r24	; 17
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	f0 df       	rcall	.-32     	; 0xd4 <cmdbreak>
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	ee df       	rcall	.-36     	; 0xd4 <cmdbreak>
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	ec df       	rcall	.-40     	; 0xd4 <cmdbreak>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	ea df       	rcall	.-44     	; 0xd4 <cmdbreak>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	e8 cf       	rjmp	.-48     	; 0xd4 <cmdbreak>

00000104 <databreak>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	d2 df       	rcall	.-92     	; 0xb0 <lcddata>
 10c:	8c 2f       	mov	r24, r28
}
 10e:	82 95       	swap	r24
	lcdcmd((x<<4)&(0xf0));
}
void databreak(char x)
{
	lcddata(x&(0xf0));
	lcddata((x<<4)&(0xf0));
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	ce df       	rcall	.-100    	; 0xb0 <lcddata>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcdstring>:
}
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	}		
		e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
 11c:	ec 01       	movw	r28, r24
	while(*p!=0)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	71 f0       	breq	.+28     	; 0x140 <lcdstring+0x28>
    {	}
	}		
		e_pass[i]='\0';
	
}
void lcdstring(char *p)
 124:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!=0)
	{
		databreak(*p);
 126:	ee df       	rcall	.-36     	; 0x104 <databreak>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	90 e7       	ldi	r25, 0x70	; 112
 12c:	a2 e0       	ldi	r26, 0x02	; 2
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	a0 40       	sbci	r26, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <lcdstring+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcdstring+0x20>
 138:	00 00       	nop
 13a:	89 91       	ld	r24, Y+
		e_pass[i]='\0';
	
}
void lcdstring(char *p)
{
	while(*p!=0)
 13c:	88 23       	and	r24, r24
 13e:	99 f7       	brne	.-26     	; 0x126 <lcdstring+0xe>
 140:	df 91       	pop	r29
	{
		databreak(*p);
		p++;
		_delay_ms(100);
	}
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <keyscan>:
 146:	5f 92       	push	r5
{
	DDRC=0xff; DDRD=7<<0;
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
 148:	6f 92       	push	r6
 14a:	7f 92       	push	r7
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	
	while(i<5)
	{PORTD=0x0f;
 164:	cf e0       	ldi	r28, 0x0F	; 15
	DDRD=0xf0;
 166:	d0 ef       	ldi	r29, 0xF0	; 240
		i++;
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
	{
		lcdstring("*");
 168:	0f 2e       	mov	r0, r31
 16a:	f0 e6       	ldi	r31, 0x60	; 96
 16c:	ef 2e       	mov	r14, r31
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ff 2e       	mov	r15, r31
 172:	f0 2d       	mov	r31, r0
		e_pass[i]='1';
 174:	02 e9       	ldi	r16, 0x92	; 146
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	0f 2e       	mov	r0, r31
 17a:	f1 e3       	ldi	r31, 0x31	; 49
 17c:	8f 2e       	mov	r8, r31
 17e:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}		
	else if(!(PIND&2<<0))
	{
		lcdstring("*");
		e_pass[i]='4';
 180:	0f 2e       	mov	r0, r31
 182:	f4 e3       	ldi	r31, 0x34	; 52
 184:	bf 2e       	mov	r11, r31
 186:	f0 2d       	mov	r31, r0
	DDRD=0xf0;
	PORTD=PORTD|(1<<5)|(1<<6)|(1<<7);
	if(!(PIND&1<<0))
	{
		lcdstring("*");
		e_pass[i]='7';
 188:	0f 2e       	mov	r0, r31
 18a:	f7 e3       	ldi	r31, 0x37	; 55
 18c:	df 2e       	mov	r13, r31
 18e:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}
	else if(!(PIND&8<<0))
    {	
		lcdstring("*");
		e_pass[i]='0';
 190:	0f 2e       	mov	r0, r31
 192:	f0 e3       	ldi	r31, 0x30	; 48
 194:	5f 2e       	mov	r5, r31
 196:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
	{
		lcdstring("*");
		e_pass[i]='2';
 198:	0f 2e       	mov	r0, r31
 19a:	f2 e3       	ldi	r31, 0x32	; 50
 19c:	7f 2e       	mov	r7, r31
 19e:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}
	else if(!(PIND&2<<0))
	{
		lcdstring("*");
		e_pass[i]='5';
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f5 e3       	ldi	r31, 0x35	; 53
 1a4:	af 2e       	mov	r10, r31
 1a6:	f0 2d       	mov	r31, r0
	DDRD=0xf0;
	PORTD=PORTD|(1<<4)|(1<<6)|(1<<7);
	if(!(PIND&1<<0))
	{
		lcdstring("*");
		e_pass[i]='8';
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f8 e3       	ldi	r31, 0x38	; 56
 1ac:	cf 2e       	mov	r12, r31
 1ae:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
	{
		lcdstring("*");
		e_pass[i]='3';
 1b0:	0f 2e       	mov	r0, r31
 1b2:	f3 e3       	ldi	r31, 0x33	; 51
 1b4:	6f 2e       	mov	r6, r31
 1b6:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}
	else if(!(PIND&2<<0))
	{
		lcdstring("*");
		e_pass[i]='6';
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f6 e3       	ldi	r31, 0x36	; 54
 1bc:	9f 2e       	mov	r9, r31
 1be:	f0 2d       	mov	r31, r0
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	
	while(i<5)
 1c0:	1f c1       	rjmp	.+574    	; 0x400 <keyscan+0x2ba>
	{PORTD=0x0f;
 1c2:	c2 bb       	out	0x12, r28	; 18
	DDRD=0xf0;
 1c4:	d1 bb       	out	0x11, r29	; 17
	PORTD=PORTD|(1<<5)|(1<<6)|(1<<7);
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	80 6e       	ori	r24, 0xE0	; 224
 1ca:	82 bb       	out	0x12, r24	; 18
	if(!(PIND&1<<0))
 1cc:	80 99       	sbic	0x10, 0	; 16
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <keyscan+0xbc>
	{
		lcdstring("*");
 1d0:	c7 01       	movw	r24, r14
 1d2:	a2 df       	rcall	.-188    	; 0x118 <lcdstring>
 1d4:	80 91 90 00 	lds	r24, 0x0090
		e_pass[i]='7';
 1d8:	90 91 91 00 	lds	r25, 0x0091
 1dc:	f8 01       	movw	r30, r16
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	d0 82       	st	Z, r13
 1e4:	01 96       	adiw	r24, 0x01	; 1
		i++;
 1e6:	90 93 91 00 	sts	0x0091, r25
 1ea:	80 93 90 00 	sts	0x0090, r24
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	90 e7       	ldi	r25, 0x70	; 112
 1f2:	a2 e0       	ldi	r26, 0x02	; 2
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	a0 40       	sbci	r26, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <keyscan+0xae>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <keyscan+0xb8>
 1fe:	00 00       	nop
 200:	37 c0       	rjmp	.+110    	; 0x270 <keyscan+0x12a>
 202:	81 99       	sbic	0x10, 1	; 16
		_delay_ms(100);
	}		
	else if(!(PIND&2<<0))
 204:	19 c0       	rjmp	.+50     	; 0x238 <keyscan+0xf2>
 206:	c7 01       	movw	r24, r14
	{
		lcdstring("*");
 208:	87 df       	rcall	.-242    	; 0x118 <lcdstring>
 20a:	80 91 90 00 	lds	r24, 0x0090
		e_pass[i]='4';
 20e:	90 91 91 00 	lds	r25, 0x0091
 212:	f8 01       	movw	r30, r16
 214:	e8 0f       	add	r30, r24
 216:	f9 1f       	adc	r31, r25
 218:	b0 82       	st	Z, r11
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 91 00 	sts	0x0091, r25
		i++;
 220:	80 93 90 00 	sts	0x0090, r24
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	90 e7       	ldi	r25, 0x70	; 112
 228:	a2 e0       	ldi	r26, 0x02	; 2
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	a0 40       	sbci	r26, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <keyscan+0xe4>
 232:	00 c0       	rjmp	.+0      	; 0x234 <keyscan+0xee>
 234:	00 00       	nop
 236:	1c c0       	rjmp	.+56     	; 0x270 <keyscan+0x12a>
 238:	82 99       	sbic	0x10, 2	; 16
 23a:	19 c0       	rjmp	.+50     	; 0x26e <keyscan+0x128>
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
 23c:	c7 01       	movw	r24, r14
 23e:	6c df       	rcall	.-296    	; 0x118 <lcdstring>
	{
		lcdstring("*");
 240:	80 91 90 00 	lds	r24, 0x0090
 244:	90 91 91 00 	lds	r25, 0x0091
		e_pass[i]='1';
 248:	f8 01       	movw	r30, r16
 24a:	e8 0f       	add	r30, r24
 24c:	f9 1f       	adc	r31, r25
 24e:	80 82       	st	Z, r8
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 91 00 	sts	0x0091, r25
		i++;
 256:	80 93 90 00 	sts	0x0090, r24
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	90 e7       	ldi	r25, 0x70	; 112
 25e:	a2 e0       	ldi	r26, 0x02	; 2
 260:	81 50       	subi	r24, 0x01	; 1
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	a0 40       	sbci	r26, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <keyscan+0x11a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <keyscan+0x124>
 26a:	00 00       	nop
 26c:	01 c0       	rjmp	.+2      	; 0x270 <keyscan+0x12a>
 26e:	80 b3       	in	r24, 0x10	; 16
 270:	c2 bb       	out	0x12, r28	; 18
 272:	d1 bb       	out	0x11, r29	; 17
		_delay_ms(100);
	}
	else if(!(PIND&8<<0))
 274:	82 b3       	in	r24, 0x12	; 18
	{	}
	PORTD=0x0f;
 276:	80 6d       	ori	r24, 0xD0	; 208
	DDRD=0xf0;
 278:	82 bb       	out	0x12, r24	; 18
	PORTD=PORTD|(1<<4)|(1<<6)|(1<<7);
 27a:	80 99       	sbic	0x10, 0	; 16
 27c:	19 c0       	rjmp	.+50     	; 0x2b0 <keyscan+0x16a>
 27e:	c7 01       	movw	r24, r14
	if(!(PIND&1<<0))
 280:	4b df       	rcall	.-362    	; 0x118 <lcdstring>
 282:	80 91 90 00 	lds	r24, 0x0090
	{
		lcdstring("*");
 286:	90 91 91 00 	lds	r25, 0x0091
		e_pass[i]='8';
 28a:	f8 01       	movw	r30, r16
 28c:	e8 0f       	add	r30, r24
 28e:	f9 1f       	adc	r31, r25
 290:	c0 82       	st	Z, r12
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 91 00 	sts	0x0091, r25
 298:	80 93 90 00 	sts	0x0090, r24
		i++;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	90 e7       	ldi	r25, 0x70	; 112
 2a0:	a2 e0       	ldi	r26, 0x02	; 2
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	a0 40       	sbci	r26, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <keyscan+0x15c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <keyscan+0x166>
 2ac:	00 00       	nop
 2ae:	50 c0       	rjmp	.+160    	; 0x350 <keyscan+0x20a>
 2b0:	81 99       	sbic	0x10, 1	; 16
 2b2:	19 c0       	rjmp	.+50     	; 0x2e6 <keyscan+0x1a0>
 2b4:	c7 01       	movw	r24, r14
 2b6:	30 df       	rcall	.-416    	; 0x118 <lcdstring>
		_delay_ms(100);
	}
	else if(!(PIND&2<<0))
 2b8:	80 91 90 00 	lds	r24, 0x0090
	{
		lcdstring("*");
 2bc:	90 91 91 00 	lds	r25, 0x0091
 2c0:	f8 01       	movw	r30, r16
		e_pass[i]='5';
 2c2:	e8 0f       	add	r30, r24
 2c4:	f9 1f       	adc	r31, r25
 2c6:	a0 82       	st	Z, r10
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	90 93 91 00 	sts	0x0091, r25
 2ce:	80 93 90 00 	sts	0x0090, r24
		i++;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	90 e7       	ldi	r25, 0x70	; 112
 2d6:	a2 e0       	ldi	r26, 0x02	; 2
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	a0 40       	sbci	r26, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <keyscan+0x192>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <keyscan+0x19c>
 2e2:	00 00       	nop
 2e4:	35 c0       	rjmp	.+106    	; 0x350 <keyscan+0x20a>
 2e6:	82 99       	sbic	0x10, 2	; 16
 2e8:	19 c0       	rjmp	.+50     	; 0x31c <keyscan+0x1d6>
 2ea:	c7 01       	movw	r24, r14
 2ec:	15 df       	rcall	.-470    	; 0x118 <lcdstring>
 2ee:	80 91 90 00 	lds	r24, 0x0090
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
 2f2:	90 91 91 00 	lds	r25, 0x0091
	{
		lcdstring("*");
 2f6:	f8 01       	movw	r30, r16
 2f8:	e8 0f       	add	r30, r24
		e_pass[i]='2';
 2fa:	f9 1f       	adc	r31, r25
 2fc:	70 82       	st	Z, r7
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	90 93 91 00 	sts	0x0091, r25
 304:	80 93 90 00 	sts	0x0090, r24
 308:	8f ef       	ldi	r24, 0xFF	; 255
		i++;
 30a:	90 e7       	ldi	r25, 0x70	; 112
 30c:	a2 e0       	ldi	r26, 0x02	; 2
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	a0 40       	sbci	r26, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <keyscan+0x1c8>
 316:	00 c0       	rjmp	.+0      	; 0x318 <keyscan+0x1d2>
 318:	00 00       	nop
 31a:	1a c0       	rjmp	.+52     	; 0x350 <keyscan+0x20a>
 31c:	83 99       	sbic	0x10, 3	; 16
 31e:	18 c0       	rjmp	.+48     	; 0x350 <keyscan+0x20a>
 320:	c7 01       	movw	r24, r14
 322:	fa de       	rcall	.-524    	; 0x118 <lcdstring>
 324:	80 91 90 00 	lds	r24, 0x0090
		_delay_ms(100);
	}
	else if(!(PIND&8<<0))
 328:	90 91 91 00 	lds	r25, 0x0091
    {	
		lcdstring("*");
 32c:	f8 01       	movw	r30, r16
 32e:	e8 0f       	add	r30, r24
 330:	f9 1f       	adc	r31, r25
		e_pass[i]='0';
 332:	50 82       	st	Z, r5
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 91 00 	sts	0x0091, r25
 33a:	80 93 90 00 	sts	0x0090, r24
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	90 e7       	ldi	r25, 0x70	; 112
		i++;
 342:	a2 e0       	ldi	r26, 0x02	; 2
 344:	81 50       	subi	r24, 0x01	; 1
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	a0 40       	sbci	r26, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <keyscan+0x1fe>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <keyscan+0x208>
 34e:	00 00       	nop
 350:	c2 bb       	out	0x12, r28	; 18
 352:	d1 bb       	out	0x11, r29	; 17
 354:	82 b3       	in	r24, 0x12	; 18
 356:	80 6b       	ori	r24, 0xB0	; 176
 358:	82 bb       	out	0x12, r24	; 18
 35a:	80 99       	sbic	0x10, 0	; 16
 35c:	1a c0       	rjmp	.+52     	; 0x392 <keyscan+0x24c>
		_delay_ms(100);
	}
	PORTD=0x0f;
 35e:	c7 01       	movw	r24, r14
	DDRD=0xf0;
 360:	db de       	rcall	.-586    	; 0x118 <lcdstring>
	PORTD=PORTD|(1<<4)|(1<<5)|(1<<7);
 362:	80 91 90 00 	lds	r24, 0x0090
 366:	90 91 91 00 	lds	r25, 0x0091
	if(!(PIND&1<<0))
 36a:	f8 01       	movw	r30, r16
	{
		lcdstring("*");
 36c:	e8 0f       	add	r30, r24
 36e:	f9 1f       	adc	r31, r25
 370:	29 e3       	ldi	r18, 0x39	; 57
		e_pass[i]='9';
 372:	20 83       	st	Z, r18
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 91 00 	sts	0x0091, r25
 37a:	80 93 90 00 	sts	0x0090, r24
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	90 e7       	ldi	r25, 0x70	; 112
 382:	a2 e0       	ldi	r26, 0x02	; 2
		i++;
 384:	81 50       	subi	r24, 0x01	; 1
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	a0 40       	sbci	r26, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <keyscan+0x23e>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <keyscan+0x248>
 38e:	00 00       	nop
 390:	37 c0       	rjmp	.+110    	; 0x400 <keyscan+0x2ba>
 392:	81 99       	sbic	0x10, 1	; 16
 394:	19 c0       	rjmp	.+50     	; 0x3c8 <keyscan+0x282>
 396:	c7 01       	movw	r24, r14
 398:	bf de       	rcall	.-642    	; 0x118 <lcdstring>
 39a:	80 91 90 00 	lds	r24, 0x0090
 39e:	90 91 91 00 	lds	r25, 0x0091
		_delay_ms(100);
	}
	else if(!(PIND&2<<0))
 3a2:	f8 01       	movw	r30, r16
 3a4:	e8 0f       	add	r30, r24
	{
		lcdstring("*");
 3a6:	f9 1f       	adc	r31, r25
 3a8:	90 82       	st	Z, r9
 3aa:	01 96       	adiw	r24, 0x01	; 1
		e_pass[i]='6';
 3ac:	90 93 91 00 	sts	0x0091, r25
 3b0:	80 93 90 00 	sts	0x0090, r24
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	90 e7       	ldi	r25, 0x70	; 112
 3b8:	a2 e0       	ldi	r26, 0x02	; 2
 3ba:	81 50       	subi	r24, 0x01	; 1
		i++;
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	a0 40       	sbci	r26, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <keyscan+0x274>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <keyscan+0x27e>
 3c4:	00 00       	nop
 3c6:	1c c0       	rjmp	.+56     	; 0x400 <keyscan+0x2ba>
 3c8:	82 99       	sbic	0x10, 2	; 16
 3ca:	19 c0       	rjmp	.+50     	; 0x3fe <keyscan+0x2b8>
 3cc:	c7 01       	movw	r24, r14
 3ce:	a4 de       	rcall	.-696    	; 0x118 <lcdstring>
 3d0:	80 91 90 00 	lds	r24, 0x0090
 3d4:	90 91 91 00 	lds	r25, 0x0091
 3d8:	f8 01       	movw	r30, r16
		_delay_ms(100);
	}
	else if(!(PIND&4<<0))
 3da:	e8 0f       	add	r30, r24
 3dc:	f9 1f       	adc	r31, r25
	{
		lcdstring("*");
 3de:	60 82       	st	Z, r6
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	90 93 91 00 	sts	0x0091, r25
		e_pass[i]='3';
 3e6:	80 93 90 00 	sts	0x0090, r24
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	90 e7       	ldi	r25, 0x70	; 112
 3ee:	a2 e0       	ldi	r26, 0x02	; 2
 3f0:	81 50       	subi	r24, 0x01	; 1
 3f2:	90 40       	sbci	r25, 0x00	; 0
		i++;
 3f4:	a0 40       	sbci	r26, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <keyscan+0x2aa>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <keyscan+0x2b4>
 3fa:	00 00       	nop
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <keyscan+0x2ba>
 3fe:	80 b3       	in	r24, 0x10	; 16
 400:	80 91 90 00 	lds	r24, 0x0090
 404:	90 91 91 00 	lds	r25, 0x0091
 408:	85 30       	cpi	r24, 0x05	; 5
 40a:	91 05       	cpc	r25, r1
 40c:	0c f4       	brge	.+2      	; 0x410 <keyscan+0x2ca>
 40e:	d9 ce       	rjmp	.-590    	; 0x1c2 <keyscan+0x7c>
 410:	8e 56       	subi	r24, 0x6E	; 110
		_delay_ms(100);
	}
	else if(!(PIND&8<<0))
 412:	9f 4f       	sbci	r25, 0xFF	; 255
	cmdbreak(0x02); cmdbreak(0x28); cmdbreak(0x0e); cmdbreak(0x06);	cmdbreak(0x01);
}
void keyscan()
{
	
	while(i<5)
 414:	dc 01       	movw	r26, r24
 416:	1c 92       	st	X, r1
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
		_delay_ms(100);
	}
	else if(!(PIND&8<<0))
    {	}
	}		
		e_pass[i]='\0';
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
	
}
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	6f 90       	pop	r6
 434:	5f 90       	pop	r5
 436:	08 95       	ret

00000438 <check>:
 438:	82 e9       	ldi	r24, 0x92	; 146
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	69 e8       	ldi	r22, 0x89	; 137
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	43 d0       	rcall	.+134    	; 0x4c8 <strcmp>
 442:	28 2f       	mov	r18, r24
 444:	39 2f       	mov	r19, r25
 446:	21 15       	cp	r18, r1
 448:	31 05       	cpc	r19, r1
 44a:	99 f4       	brne	.+38     	; 0x472 <__stack+0x13>
	lcddata((x<<4)&(0xf0));
}
void check()
{
	
	if(strcmp(e_pass,s_pass)==0)
 44c:	82 e6       	ldi	r24, 0x62	; 98
	{
		lcdstring("PASSWORD");
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	63 de       	rcall	.-826    	; 0x118 <lcdstring>
 452:	80 ec       	ldi	r24, 0xC0	; 192
 454:	3f de       	rcall	.-898    	; 0xd4 <cmdbreak>
		cmdbreak(0xc0);
 456:	8b e6       	ldi	r24, 0x6B	; 107
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	5e de       	rcall	.-836    	; 0x118 <lcdstring>
		lcdstring("ACCEPTED");
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	90 e7       	ldi	r25, 0x70	; 112
 460:	a2 e0       	ldi	r26, 0x02	; 2
 462:	81 50       	subi	r24, 0x01	; 1
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	a0 40       	sbci	r26, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__stack+0x3>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__stack+0xd>
 46c:	00 00       	nop
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	31 ce       	rjmp	.-926    	; 0xd4 <cmdbreak>
 472:	84 e7       	ldi	r24, 0x74	; 116
 474:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(100);
		cmdbreak(0x01);
 476:	50 de       	rcall	.-864    	; 0x118 <lcdstring>
 478:	80 ec       	ldi	r24, 0xC0	; 192
 47a:	2c de       	rcall	.-936    	; 0xd4 <cmdbreak>
 47c:	82 e6       	ldi	r24, 0x62	; 98
		
	}
	else 
	{
		lcdstring("INCORRECT");
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	4b de       	rcall	.-874    	; 0x118 <lcdstring>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	91 ee       	ldi	r25, 0xE1	; 225
		cmdbreak(0xc0);
 486:	a4 e0       	ldi	r26, 0x04	; 4
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	90 40       	sbci	r25, 0x00	; 0
		lcdstring("PASSWORD");
 48c:	a0 40       	sbci	r26, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__stack+0x29>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__stack+0x33>
 492:	00 00       	nop
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	1e de       	rcall	.-964    	; 0xd4 <cmdbreak>
 498:	8e e7       	ldi	r24, 0x7E	; 126
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	3d de       	rcall	.-902    	; 0x118 <lcdstring>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	90 e7       	ldi	r25, 0x70	; 112
 4a2:	a2 e0       	ldi	r26, 0x02	; 2
 4a4:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(200);
		cmdbreak(0x01);
 4a6:	90 40       	sbci	r25, 0x00	; 0
 4a8:	a0 40       	sbci	r26, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__stack+0x45>
		lcdstring("TYPE AGAIN");
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__stack+0x4f>
 4ae:	00 00       	nop
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	10 ce       	rjmp	.-992    	; 0xd4 <cmdbreak>

000004b4 <main>:
 4b4:	19 de       	rcall	.-974    	; 0xe8 <init_lcd>
 4b6:	47 de       	rcall	.-882    	; 0x146 <keyscan>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0c de       	rcall	.-1000   	; 0xd4 <cmdbreak>
 4bc:	bd df       	rcall	.-134    	; 0x438 <check>
 4be:	10 92 91 00 	sts	0x0091, r1
 4c2:	10 92 90 00 	sts	0x0090, r1
		_delay_ms(100);
		cmdbreak(0x01);
 4c6:	f7 cf       	rjmp	.-18     	; 0x4b6 <main+0x2>

000004c8 <strcmp>:
 4c8:	fb 01       	movw	r30, r22
 4ca:	dc 01       	movw	r26, r24
 4cc:	8d 91       	ld	r24, X+
	while (1)
	{
		keyscan();
		cmdbreak(0x01);
		check();
		i=0;
 4ce:	01 90       	ld	r0, Z+
 4d0:	80 19       	sub	r24, r0
 4d2:	01 10       	cpse	r0, r1
 4d4:	d9 f3       	breq	.-10     	; 0x4cc <strcmp+0x4>
 4d6:	99 0b       	sbc	r25, r25
 4d8:	08 95       	ret

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
